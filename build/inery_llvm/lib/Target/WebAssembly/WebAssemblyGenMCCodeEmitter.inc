/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Machine Code Emitter                                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

uint64_t WebAssemblyMCCodeEmitter::getBinaryCodeForInstr(const MCInst &MI,
    SmallVectorImpl<MCFixup> &Fixups,
    const MCSubtargetInfo &STI) const {
  static const uint64_t InstBits[] = {
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(139),	// ABS_F32
    UINT64_C(153),	// ABS_F64
    UINT64_C(146),	// ADD_F32
    UINT64_C(4294967295),	// ADD_F32x4
    UINT64_C(160),	// ADD_F64
    UINT64_C(4294967295),	// ADD_I16x8
    UINT64_C(106),	// ADD_I32
    UINT64_C(4294967295),	// ADD_I32x4
    UINT64_C(124),	// ADD_I64
    UINT64_C(4294967295),	// ADD_I8x16
    UINT64_C(4294967295),	// ADJCALLSTACKDOWN
    UINT64_C(4294967295),	// ADJCALLSTACKUP
    UINT64_C(113),	// AND_I32
    UINT64_C(131),	// AND_I64
    UINT64_C(4294967295),	// ARGUMENT_EXCEPT_REF
    UINT64_C(4294967295),	// ARGUMENT_F32
    UINT64_C(4294967295),	// ARGUMENT_F64
    UINT64_C(4294967295),	// ARGUMENT_I32
    UINT64_C(4294967295),	// ARGUMENT_I64
    UINT64_C(4294967295),	// ARGUMENT_v16i8
    UINT64_C(4294967295),	// ARGUMENT_v4f32
    UINT64_C(4294967295),	// ARGUMENT_v4i32
    UINT64_C(4294967295),	// ARGUMENT_v8i16
    UINT64_C(65043),	// ATOMIC_LOAD16_U_I32
    UINT64_C(65045),	// ATOMIC_LOAD16_U_I64
    UINT64_C(65046),	// ATOMIC_LOAD32_U_I64
    UINT64_C(65042),	// ATOMIC_LOAD8_U_I32
    UINT64_C(65044),	// ATOMIC_LOAD8_U_I64
    UINT64_C(65040),	// ATOMIC_LOAD_I32
    UINT64_C(65041),	// ATOMIC_LOAD_I64
    UINT64_C(2),	// BLOCK
    UINT64_C(12),	// BR
    UINT64_C(13),	// BR_IF
    UINT64_C(14),	// BR_TABLE_I32
    UINT64_C(4294967295),	// BR_TABLE_I64
    UINT64_C(4294967295),	// BR_UNLESS
    UINT64_C(16),	// CALL_EXCEPT_REF
    UINT64_C(16),	// CALL_F32
    UINT64_C(16),	// CALL_F64
    UINT64_C(16),	// CALL_I32
    UINT64_C(16),	// CALL_I64
    UINT64_C(17),	// CALL_INDIRECT_EXCEPT_REF
    UINT64_C(17),	// CALL_INDIRECT_F32
    UINT64_C(17),	// CALL_INDIRECT_F64
    UINT64_C(17),	// CALL_INDIRECT_I32
    UINT64_C(17),	// CALL_INDIRECT_I64
    UINT64_C(17),	// CALL_INDIRECT_VOID
    UINT64_C(17),	// CALL_INDIRECT_v16i8
    UINT64_C(17),	// CALL_INDIRECT_v4f32
    UINT64_C(17),	// CALL_INDIRECT_v4i32
    UINT64_C(17),	// CALL_INDIRECT_v8i16
    UINT64_C(16),	// CALL_VOID
    UINT64_C(16),	// CALL_v16i8
    UINT64_C(16),	// CALL_v4f32
    UINT64_C(16),	// CALL_v4i32
    UINT64_C(16),	// CALL_v8i16
    UINT64_C(0),	// CATCHRET
    UINT64_C(5),	// CATCH_ALL
    UINT64_C(7),	// CATCH_I32
    UINT64_C(7),	// CATCH_I64
    UINT64_C(141),	// CEIL_F32
    UINT64_C(155),	// CEIL_F64
    UINT64_C(0),	// CLEANUPRET
    UINT64_C(103),	// CLZ_I32
    UINT64_C(121),	// CLZ_I64
    UINT64_C(67),	// CONST_F32
    UINT64_C(68),	// CONST_F64
    UINT64_C(65),	// CONST_I32
    UINT64_C(66),	// CONST_I64
    UINT64_C(152),	// COPYSIGN_F32
    UINT64_C(166),	// COPYSIGN_F64
    UINT64_C(4294967295),	// COPY_EXCEPT_REF
    UINT64_C(4294967295),	// COPY_F32
    UINT64_C(4294967295),	// COPY_F64
    UINT64_C(4294967295),	// COPY_I32
    UINT64_C(4294967295),	// COPY_I64
    UINT64_C(4294967295),	// COPY_V128
    UINT64_C(104),	// CTZ_I32
    UINT64_C(122),	// CTZ_I64
    UINT64_C(63),	// CURRENT_MEMORY_I32
    UINT64_C(149),	// DIV_F32
    UINT64_C(163),	// DIV_F64
    UINT64_C(109),	// DIV_S_I32
    UINT64_C(127),	// DIV_S_I64
    UINT64_C(110),	// DIV_U_I32
    UINT64_C(128),	// DIV_U_I64
    UINT64_C(26),	// DROP_EXCEPT_REF
    UINT64_C(26),	// DROP_F32
    UINT64_C(26),	// DROP_F64
    UINT64_C(26),	// DROP_I32
    UINT64_C(26),	// DROP_I64
    UINT64_C(26),	// DROP_V128
    UINT64_C(11),	// END_BLOCK
    UINT64_C(11),	// END_FUNCTION
    UINT64_C(11),	// END_LOOP
    UINT64_C(11),	// END_TRY
    UINT64_C(69),	// EQZ_I32
    UINT64_C(80),	// EQZ_I64
    UINT64_C(91),	// EQ_F32
    UINT64_C(97),	// EQ_F64
    UINT64_C(70),	// EQ_I32
    UINT64_C(81),	// EQ_I64
    UINT64_C(178),	// F32_CONVERT_S_I32
    UINT64_C(180),	// F32_CONVERT_S_I64
    UINT64_C(179),	// F32_CONVERT_U_I32
    UINT64_C(181),	// F32_CONVERT_U_I64
    UINT64_C(182),	// F32_DEMOTE_F64
    UINT64_C(190),	// F32_REINTERPRET_I32
    UINT64_C(183),	// F64_CONVERT_S_I32
    UINT64_C(185),	// F64_CONVERT_S_I64
    UINT64_C(184),	// F64_CONVERT_U_I32
    UINT64_C(186),	// F64_CONVERT_U_I64
    UINT64_C(187),	// F64_PROMOTE_F32
    UINT64_C(191),	// F64_REINTERPRET_I64
    UINT64_C(4294967295),	// FALLTHROUGH_RETURN_EXCEPT_REF
    UINT64_C(4294967295),	// FALLTHROUGH_RETURN_F32
    UINT64_C(4294967295),	// FALLTHROUGH_RETURN_F64
    UINT64_C(4294967295),	// FALLTHROUGH_RETURN_I32
    UINT64_C(4294967295),	// FALLTHROUGH_RETURN_I64
    UINT64_C(4294967295),	// FALLTHROUGH_RETURN_VOID
    UINT64_C(4294967295),	// FALLTHROUGH_RETURN_v16i8
    UINT64_C(4294967295),	// FALLTHROUGH_RETURN_v4f32
    UINT64_C(4294967295),	// FALLTHROUGH_RETURN_v4i32
    UINT64_C(4294967295),	// FALLTHROUGH_RETURN_v8i16
    UINT64_C(142),	// FLOOR_F32
    UINT64_C(156),	// FLOOR_F64
    UINT64_C(0),	// FP_TO_SINT_I32_F32
    UINT64_C(0),	// FP_TO_SINT_I32_F64
    UINT64_C(0),	// FP_TO_SINT_I64_F32
    UINT64_C(0),	// FP_TO_SINT_I64_F64
    UINT64_C(0),	// FP_TO_UINT_I32_F32
    UINT64_C(0),	// FP_TO_UINT_I32_F64
    UINT64_C(0),	// FP_TO_UINT_I64_F32
    UINT64_C(0),	// FP_TO_UINT_I64_F64
    UINT64_C(35),	// GET_GLOBAL_EXCEPT_REF
    UINT64_C(35),	// GET_GLOBAL_F32
    UINT64_C(35),	// GET_GLOBAL_F64
    UINT64_C(35),	// GET_GLOBAL_I32
    UINT64_C(35),	// GET_GLOBAL_I64
    UINT64_C(35),	// GET_GLOBAL_V128
    UINT64_C(32),	// GET_LOCAL_EXCEPT_REF
    UINT64_C(32),	// GET_LOCAL_F32
    UINT64_C(32),	// GET_LOCAL_F64
    UINT64_C(32),	// GET_LOCAL_I32
    UINT64_C(32),	// GET_LOCAL_I64
    UINT64_C(32),	// GET_LOCAL_V128
    UINT64_C(96),	// GE_F32
    UINT64_C(102),	// GE_F64
    UINT64_C(78),	// GE_S_I32
    UINT64_C(89),	// GE_S_I64
    UINT64_C(79),	// GE_U_I32
    UINT64_C(90),	// GE_U_I64
    UINT64_C(64),	// GROW_MEMORY_I32
    UINT64_C(94),	// GT_F32
    UINT64_C(100),	// GT_F64
    UINT64_C(74),	// GT_S_I32
    UINT64_C(85),	// GT_S_I64
    UINT64_C(75),	// GT_U_I32
    UINT64_C(86),	// GT_U_I64
    UINT64_C(193),	// I32_EXTEND16_S_I32
    UINT64_C(192),	// I32_EXTEND8_S_I32
    UINT64_C(188),	// I32_REINTERPRET_F32
    UINT64_C(168),	// I32_TRUNC_S_F32
    UINT64_C(170),	// I32_TRUNC_S_F64
    UINT64_C(64512),	// I32_TRUNC_S_SAT_F32
    UINT64_C(64514),	// I32_TRUNC_S_SAT_F64
    UINT64_C(169),	// I32_TRUNC_U_F32
    UINT64_C(171),	// I32_TRUNC_U_F64
    UINT64_C(64513),	// I32_TRUNC_U_SAT_F32
    UINT64_C(64515),	// I32_TRUNC_U_SAT_F64
    UINT64_C(167),	// I32_WRAP_I64
    UINT64_C(195),	// I64_EXTEND16_S_I64
    UINT64_C(196),	// I64_EXTEND32_S_I64
    UINT64_C(194),	// I64_EXTEND8_S_I64
    UINT64_C(172),	// I64_EXTEND_S_I32
    UINT64_C(173),	// I64_EXTEND_U_I32
    UINT64_C(189),	// I64_REINTERPRET_F64
    UINT64_C(174),	// I64_TRUNC_S_F32
    UINT64_C(176),	// I64_TRUNC_S_F64
    UINT64_C(64516),	// I64_TRUNC_S_SAT_F32
    UINT64_C(64518),	// I64_TRUNC_S_SAT_F64
    UINT64_C(175),	// I64_TRUNC_U_F32
    UINT64_C(177),	// I64_TRUNC_U_F64
    UINT64_C(64517),	// I64_TRUNC_U_SAT_F32
    UINT64_C(64519),	// I64_TRUNC_U_SAT_F64
    UINT64_C(95),	// LE_F32
    UINT64_C(101),	// LE_F64
    UINT64_C(76),	// LE_S_I32
    UINT64_C(87),	// LE_S_I64
    UINT64_C(77),	// LE_U_I32
    UINT64_C(88),	// LE_U_I64
    UINT64_C(46),	// LOAD16_S_I32
    UINT64_C(50),	// LOAD16_S_I64
    UINT64_C(47),	// LOAD16_U_I32
    UINT64_C(51),	// LOAD16_U_I64
    UINT64_C(52),	// LOAD32_S_I64
    UINT64_C(53),	// LOAD32_U_I64
    UINT64_C(44),	// LOAD8_S_I32
    UINT64_C(48),	// LOAD8_S_I64
    UINT64_C(45),	// LOAD8_U_I32
    UINT64_C(49),	// LOAD8_U_I64
    UINT64_C(42),	// LOAD_F32
    UINT64_C(43),	// LOAD_F64
    UINT64_C(40),	// LOAD_I32
    UINT64_C(41),	// LOAD_I64
    UINT64_C(3),	// LOOP
    UINT64_C(93),	// LT_F32
    UINT64_C(99),	// LT_F64
    UINT64_C(72),	// LT_S_I32
    UINT64_C(83),	// LT_S_I64
    UINT64_C(73),	// LT_U_I32
    UINT64_C(84),	// LT_U_I64
    UINT64_C(151),	// MAX_F32
    UINT64_C(165),	// MAX_F64
    UINT64_C(63),	// MEMORY_GROW_I32
    UINT64_C(63),	// MEMORY_SIZE_I32
    UINT64_C(63),	// MEM_GROW_I32
    UINT64_C(63),	// MEM_SIZE_I32
    UINT64_C(150),	// MIN_F32
    UINT64_C(164),	// MIN_F64
    UINT64_C(148),	// MUL_F32
    UINT64_C(4294967295),	// MUL_F32x4
    UINT64_C(162),	// MUL_F64
    UINT64_C(4294967295),	// MUL_I16x8
    UINT64_C(108),	// MUL_I32
    UINT64_C(4294967295),	// MUL_I32x4
    UINT64_C(126),	// MUL_I64
    UINT64_C(4294967295),	// MUL_I8x16
    UINT64_C(144),	// NEAREST_F32
    UINT64_C(158),	// NEAREST_F64
    UINT64_C(140),	// NEG_F32
    UINT64_C(154),	// NEG_F64
    UINT64_C(92),	// NE_F32
    UINT64_C(98),	// NE_F64
    UINT64_C(71),	// NE_I32
    UINT64_C(82),	// NE_I64
    UINT64_C(1),	// NOP
    UINT64_C(114),	// OR_I32
    UINT64_C(132),	// OR_I64
    UINT64_C(4294967295),	// PCALL_INDIRECT_EXCEPT_REF
    UINT64_C(4294967295),	// PCALL_INDIRECT_F32
    UINT64_C(4294967295),	// PCALL_INDIRECT_F64
    UINT64_C(4294967295),	// PCALL_INDIRECT_I32
    UINT64_C(4294967295),	// PCALL_INDIRECT_I64
    UINT64_C(4294967295),	// PCALL_INDIRECT_VOID
    UINT64_C(4294967295),	// PCALL_INDIRECT_v16i8
    UINT64_C(4294967295),	// PCALL_INDIRECT_v4f32
    UINT64_C(4294967295),	// PCALL_INDIRECT_v4i32
    UINT64_C(4294967295),	// PCALL_INDIRECT_v8i16
    UINT64_C(105),	// POPCNT_I32
    UINT64_C(123),	// POPCNT_I64
    UINT64_C(111),	// REM_S_I32
    UINT64_C(129),	// REM_S_I64
    UINT64_C(112),	// REM_U_I32
    UINT64_C(130),	// REM_U_I64
    UINT64_C(9),	// RETHROW
    UINT64_C(15),	// RETURN_EXCEPT_REF
    UINT64_C(15),	// RETURN_F32
    UINT64_C(15),	// RETURN_F64
    UINT64_C(15),	// RETURN_I32
    UINT64_C(15),	// RETURN_I64
    UINT64_C(15),	// RETURN_VOID
    UINT64_C(15),	// RETURN_v16i8
    UINT64_C(15),	// RETURN_v4f32
    UINT64_C(15),	// RETURN_v4i32
    UINT64_C(15),	// RETURN_v8i16
    UINT64_C(119),	// ROTL_I32
    UINT64_C(137),	// ROTL_I64
    UINT64_C(120),	// ROTR_I32
    UINT64_C(138),	// ROTR_I64
    UINT64_C(27),	// SELECT_EXCEPT_REF
    UINT64_C(27),	// SELECT_F32
    UINT64_C(27),	// SELECT_F64
    UINT64_C(27),	// SELECT_I32
    UINT64_C(27),	// SELECT_I64
    UINT64_C(36),	// SET_GLOBAL_EXCEPT_REF
    UINT64_C(36),	// SET_GLOBAL_F32
    UINT64_C(36),	// SET_GLOBAL_F64
    UINT64_C(36),	// SET_GLOBAL_I32
    UINT64_C(36),	// SET_GLOBAL_I64
    UINT64_C(36),	// SET_GLOBAL_V128
    UINT64_C(33),	// SET_LOCAL_EXCEPT_REF
    UINT64_C(33),	// SET_LOCAL_F32
    UINT64_C(33),	// SET_LOCAL_F64
    UINT64_C(33),	// SET_LOCAL_I32
    UINT64_C(33),	// SET_LOCAL_I64
    UINT64_C(33),	// SET_LOCAL_V128
    UINT64_C(116),	// SHL_I32
    UINT64_C(134),	// SHL_I64
    UINT64_C(117),	// SHR_S_I32
    UINT64_C(135),	// SHR_S_I64
    UINT64_C(118),	// SHR_U_I32
    UINT64_C(136),	// SHR_U_I64
    UINT64_C(145),	// SQRT_F32
    UINT64_C(159),	// SQRT_F64
    UINT64_C(59),	// STORE16_I32
    UINT64_C(61),	// STORE16_I64
    UINT64_C(62),	// STORE32_I64
    UINT64_C(58),	// STORE8_I32
    UINT64_C(60),	// STORE8_I64
    UINT64_C(56),	// STORE_F32
    UINT64_C(57),	// STORE_F64
    UINT64_C(54),	// STORE_I32
    UINT64_C(55),	// STORE_I64
    UINT64_C(147),	// SUB_F32
    UINT64_C(4294967295),	// SUB_F32x4
    UINT64_C(161),	// SUB_F64
    UINT64_C(4294967295),	// SUB_I16x8
    UINT64_C(107),	// SUB_I32
    UINT64_C(4294967295),	// SUB_I32x4
    UINT64_C(125),	// SUB_I64
    UINT64_C(4294967295),	// SUB_I8x16
    UINT64_C(4294967295),	// TEE_EXCEPT_REF
    UINT64_C(4294967295),	// TEE_F32
    UINT64_C(4294967295),	// TEE_F64
    UINT64_C(4294967295),	// TEE_I32
    UINT64_C(4294967295),	// TEE_I64
    UINT64_C(34),	// TEE_LOCAL_EXCEPT_REF
    UINT64_C(34),	// TEE_LOCAL_F32
    UINT64_C(34),	// TEE_LOCAL_F64
    UINT64_C(34),	// TEE_LOCAL_I32
    UINT64_C(34),	// TEE_LOCAL_I64
    UINT64_C(34),	// TEE_LOCAL_V128
    UINT64_C(4294967295),	// TEE_V128
    UINT64_C(8),	// THROW_I32
    UINT64_C(8),	// THROW_I64
    UINT64_C(143),	// TRUNC_F32
    UINT64_C(157),	// TRUNC_F64
    UINT64_C(6),	// TRY
    UINT64_C(0),	// UNREACHABLE
    UINT64_C(115),	// XOR_I32
    UINT64_C(133),	// XOR_I64
    UINT64_C(0)
  };
  const unsigned opcode = MI.getOpcode();
  uint64_t Value = InstBits[opcode];
  uint64_t op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case WebAssembly::ABS_F32:
    case WebAssembly::ABS_F64:
    case WebAssembly::ADD_F32:
    case WebAssembly::ADD_F32x4:
    case WebAssembly::ADD_F64:
    case WebAssembly::ADD_I16x8:
    case WebAssembly::ADD_I32:
    case WebAssembly::ADD_I32x4:
    case WebAssembly::ADD_I64:
    case WebAssembly::ADD_I8x16:
    case WebAssembly::ADJCALLSTACKDOWN:
    case WebAssembly::ADJCALLSTACKUP:
    case WebAssembly::AND_I32:
    case WebAssembly::AND_I64:
    case WebAssembly::ARGUMENT_EXCEPT_REF:
    case WebAssembly::ARGUMENT_F32:
    case WebAssembly::ARGUMENT_F64:
    case WebAssembly::ARGUMENT_I32:
    case WebAssembly::ARGUMENT_I64:
    case WebAssembly::ARGUMENT_v16i8:
    case WebAssembly::ARGUMENT_v4f32:
    case WebAssembly::ARGUMENT_v4i32:
    case WebAssembly::ARGUMENT_v8i16:
    case WebAssembly::ATOMIC_LOAD16_U_I32:
    case WebAssembly::ATOMIC_LOAD16_U_I64:
    case WebAssembly::ATOMIC_LOAD32_U_I64:
    case WebAssembly::ATOMIC_LOAD8_U_I32:
    case WebAssembly::ATOMIC_LOAD8_U_I64:
    case WebAssembly::ATOMIC_LOAD_I32:
    case WebAssembly::ATOMIC_LOAD_I64:
    case WebAssembly::BLOCK:
    case WebAssembly::BR:
    case WebAssembly::BR_IF:
    case WebAssembly::BR_TABLE_I32:
    case WebAssembly::BR_TABLE_I64:
    case WebAssembly::BR_UNLESS:
    case WebAssembly::CALL_EXCEPT_REF:
    case WebAssembly::CALL_F32:
    case WebAssembly::CALL_F64:
    case WebAssembly::CALL_I32:
    case WebAssembly::CALL_I64:
    case WebAssembly::CALL_INDIRECT_EXCEPT_REF:
    case WebAssembly::CALL_INDIRECT_F32:
    case WebAssembly::CALL_INDIRECT_F64:
    case WebAssembly::CALL_INDIRECT_I32:
    case WebAssembly::CALL_INDIRECT_I64:
    case WebAssembly::CALL_INDIRECT_VOID:
    case WebAssembly::CALL_INDIRECT_v16i8:
    case WebAssembly::CALL_INDIRECT_v4f32:
    case WebAssembly::CALL_INDIRECT_v4i32:
    case WebAssembly::CALL_INDIRECT_v8i16:
    case WebAssembly::CALL_VOID:
    case WebAssembly::CALL_v16i8:
    case WebAssembly::CALL_v4f32:
    case WebAssembly::CALL_v4i32:
    case WebAssembly::CALL_v8i16:
    case WebAssembly::CATCHRET:
    case WebAssembly::CATCH_ALL:
    case WebAssembly::CATCH_I32:
    case WebAssembly::CATCH_I64:
    case WebAssembly::CEIL_F32:
    case WebAssembly::CEIL_F64:
    case WebAssembly::CLEANUPRET:
    case WebAssembly::CLZ_I32:
    case WebAssembly::CLZ_I64:
    case WebAssembly::CONST_F32:
    case WebAssembly::CONST_F64:
    case WebAssembly::CONST_I32:
    case WebAssembly::CONST_I64:
    case WebAssembly::COPYSIGN_F32:
    case WebAssembly::COPYSIGN_F64:
    case WebAssembly::COPY_EXCEPT_REF:
    case WebAssembly::COPY_F32:
    case WebAssembly::COPY_F64:
    case WebAssembly::COPY_I32:
    case WebAssembly::COPY_I64:
    case WebAssembly::COPY_V128:
    case WebAssembly::CTZ_I32:
    case WebAssembly::CTZ_I64:
    case WebAssembly::CURRENT_MEMORY_I32:
    case WebAssembly::DIV_F32:
    case WebAssembly::DIV_F64:
    case WebAssembly::DIV_S_I32:
    case WebAssembly::DIV_S_I64:
    case WebAssembly::DIV_U_I32:
    case WebAssembly::DIV_U_I64:
    case WebAssembly::DROP_EXCEPT_REF:
    case WebAssembly::DROP_F32:
    case WebAssembly::DROP_F64:
    case WebAssembly::DROP_I32:
    case WebAssembly::DROP_I64:
    case WebAssembly::DROP_V128:
    case WebAssembly::END_BLOCK:
    case WebAssembly::END_FUNCTION:
    case WebAssembly::END_LOOP:
    case WebAssembly::END_TRY:
    case WebAssembly::EQZ_I32:
    case WebAssembly::EQZ_I64:
    case WebAssembly::EQ_F32:
    case WebAssembly::EQ_F64:
    case WebAssembly::EQ_I32:
    case WebAssembly::EQ_I64:
    case WebAssembly::F32_CONVERT_S_I32:
    case WebAssembly::F32_CONVERT_S_I64:
    case WebAssembly::F32_CONVERT_U_I32:
    case WebAssembly::F32_CONVERT_U_I64:
    case WebAssembly::F32_DEMOTE_F64:
    case WebAssembly::F32_REINTERPRET_I32:
    case WebAssembly::F64_CONVERT_S_I32:
    case WebAssembly::F64_CONVERT_S_I64:
    case WebAssembly::F64_CONVERT_U_I32:
    case WebAssembly::F64_CONVERT_U_I64:
    case WebAssembly::F64_PROMOTE_F32:
    case WebAssembly::F64_REINTERPRET_I64:
    case WebAssembly::FALLTHROUGH_RETURN_EXCEPT_REF:
    case WebAssembly::FALLTHROUGH_RETURN_F32:
    case WebAssembly::FALLTHROUGH_RETURN_F64:
    case WebAssembly::FALLTHROUGH_RETURN_I32:
    case WebAssembly::FALLTHROUGH_RETURN_I64:
    case WebAssembly::FALLTHROUGH_RETURN_VOID:
    case WebAssembly::FALLTHROUGH_RETURN_v16i8:
    case WebAssembly::FALLTHROUGH_RETURN_v4f32:
    case WebAssembly::FALLTHROUGH_RETURN_v4i32:
    case WebAssembly::FALLTHROUGH_RETURN_v8i16:
    case WebAssembly::FLOOR_F32:
    case WebAssembly::FLOOR_F64:
    case WebAssembly::FP_TO_SINT_I32_F32:
    case WebAssembly::FP_TO_SINT_I32_F64:
    case WebAssembly::FP_TO_SINT_I64_F32:
    case WebAssembly::FP_TO_SINT_I64_F64:
    case WebAssembly::FP_TO_UINT_I32_F32:
    case WebAssembly::FP_TO_UINT_I32_F64:
    case WebAssembly::FP_TO_UINT_I64_F32:
    case WebAssembly::FP_TO_UINT_I64_F64:
    case WebAssembly::GET_GLOBAL_EXCEPT_REF:
    case WebAssembly::GET_GLOBAL_F32:
    case WebAssembly::GET_GLOBAL_F64:
    case WebAssembly::GET_GLOBAL_I32:
    case WebAssembly::GET_GLOBAL_I64:
    case WebAssembly::GET_GLOBAL_V128:
    case WebAssembly::GET_LOCAL_EXCEPT_REF:
    case WebAssembly::GET_LOCAL_F32:
    case WebAssembly::GET_LOCAL_F64:
    case WebAssembly::GET_LOCAL_I32:
    case WebAssembly::GET_LOCAL_I64:
    case WebAssembly::GET_LOCAL_V128:
    case WebAssembly::GE_F32:
    case WebAssembly::GE_F64:
    case WebAssembly::GE_S_I32:
    case WebAssembly::GE_S_I64:
    case WebAssembly::GE_U_I32:
    case WebAssembly::GE_U_I64:
    case WebAssembly::GROW_MEMORY_I32:
    case WebAssembly::GT_F32:
    case WebAssembly::GT_F64:
    case WebAssembly::GT_S_I32:
    case WebAssembly::GT_S_I64:
    case WebAssembly::GT_U_I32:
    case WebAssembly::GT_U_I64:
    case WebAssembly::I32_EXTEND16_S_I32:
    case WebAssembly::I32_EXTEND8_S_I32:
    case WebAssembly::I32_REINTERPRET_F32:
    case WebAssembly::I32_TRUNC_S_F32:
    case WebAssembly::I32_TRUNC_S_F64:
    case WebAssembly::I32_TRUNC_S_SAT_F32:
    case WebAssembly::I32_TRUNC_S_SAT_F64:
    case WebAssembly::I32_TRUNC_U_F32:
    case WebAssembly::I32_TRUNC_U_F64:
    case WebAssembly::I32_TRUNC_U_SAT_F32:
    case WebAssembly::I32_TRUNC_U_SAT_F64:
    case WebAssembly::I32_WRAP_I64:
    case WebAssembly::I64_EXTEND16_S_I64:
    case WebAssembly::I64_EXTEND32_S_I64:
    case WebAssembly::I64_EXTEND8_S_I64:
    case WebAssembly::I64_EXTEND_S_I32:
    case WebAssembly::I64_EXTEND_U_I32:
    case WebAssembly::I64_REINTERPRET_F64:
    case WebAssembly::I64_TRUNC_S_F32:
    case WebAssembly::I64_TRUNC_S_F64:
    case WebAssembly::I64_TRUNC_S_SAT_F32:
    case WebAssembly::I64_TRUNC_S_SAT_F64:
    case WebAssembly::I64_TRUNC_U_F32:
    case WebAssembly::I64_TRUNC_U_F64:
    case WebAssembly::I64_TRUNC_U_SAT_F32:
    case WebAssembly::I64_TRUNC_U_SAT_F64:
    case WebAssembly::LE_F32:
    case WebAssembly::LE_F64:
    case WebAssembly::LE_S_I32:
    case WebAssembly::LE_S_I64:
    case WebAssembly::LE_U_I32:
    case WebAssembly::LE_U_I64:
    case WebAssembly::LOAD16_S_I32:
    case WebAssembly::LOAD16_S_I64:
    case WebAssembly::LOAD16_U_I32:
    case WebAssembly::LOAD16_U_I64:
    case WebAssembly::LOAD32_S_I64:
    case WebAssembly::LOAD32_U_I64:
    case WebAssembly::LOAD8_S_I32:
    case WebAssembly::LOAD8_S_I64:
    case WebAssembly::LOAD8_U_I32:
    case WebAssembly::LOAD8_U_I64:
    case WebAssembly::LOAD_F32:
    case WebAssembly::LOAD_F64:
    case WebAssembly::LOAD_I32:
    case WebAssembly::LOAD_I64:
    case WebAssembly::LOOP:
    case WebAssembly::LT_F32:
    case WebAssembly::LT_F64:
    case WebAssembly::LT_S_I32:
    case WebAssembly::LT_S_I64:
    case WebAssembly::LT_U_I32:
    case WebAssembly::LT_U_I64:
    case WebAssembly::MAX_F32:
    case WebAssembly::MAX_F64:
    case WebAssembly::MEMORY_GROW_I32:
    case WebAssembly::MEMORY_SIZE_I32:
    case WebAssembly::MEM_GROW_I32:
    case WebAssembly::MEM_SIZE_I32:
    case WebAssembly::MIN_F32:
    case WebAssembly::MIN_F64:
    case WebAssembly::MUL_F32:
    case WebAssembly::MUL_F32x4:
    case WebAssembly::MUL_F64:
    case WebAssembly::MUL_I16x8:
    case WebAssembly::MUL_I32:
    case WebAssembly::MUL_I32x4:
    case WebAssembly::MUL_I64:
    case WebAssembly::MUL_I8x16:
    case WebAssembly::NEAREST_F32:
    case WebAssembly::NEAREST_F64:
    case WebAssembly::NEG_F32:
    case WebAssembly::NEG_F64:
    case WebAssembly::NE_F32:
    case WebAssembly::NE_F64:
    case WebAssembly::NE_I32:
    case WebAssembly::NE_I64:
    case WebAssembly::NOP:
    case WebAssembly::OR_I32:
    case WebAssembly::OR_I64:
    case WebAssembly::PCALL_INDIRECT_EXCEPT_REF:
    case WebAssembly::PCALL_INDIRECT_F32:
    case WebAssembly::PCALL_INDIRECT_F64:
    case WebAssembly::PCALL_INDIRECT_I32:
    case WebAssembly::PCALL_INDIRECT_I64:
    case WebAssembly::PCALL_INDIRECT_VOID:
    case WebAssembly::PCALL_INDIRECT_v16i8:
    case WebAssembly::PCALL_INDIRECT_v4f32:
    case WebAssembly::PCALL_INDIRECT_v4i32:
    case WebAssembly::PCALL_INDIRECT_v8i16:
    case WebAssembly::POPCNT_I32:
    case WebAssembly::POPCNT_I64:
    case WebAssembly::REM_S_I32:
    case WebAssembly::REM_S_I64:
    case WebAssembly::REM_U_I32:
    case WebAssembly::REM_U_I64:
    case WebAssembly::RETHROW:
    case WebAssembly::RETURN_EXCEPT_REF:
    case WebAssembly::RETURN_F32:
    case WebAssembly::RETURN_F64:
    case WebAssembly::RETURN_I32:
    case WebAssembly::RETURN_I64:
    case WebAssembly::RETURN_VOID:
    case WebAssembly::RETURN_v16i8:
    case WebAssembly::RETURN_v4f32:
    case WebAssembly::RETURN_v4i32:
    case WebAssembly::RETURN_v8i16:
    case WebAssembly::ROTL_I32:
    case WebAssembly::ROTL_I64:
    case WebAssembly::ROTR_I32:
    case WebAssembly::ROTR_I64:
    case WebAssembly::SELECT_EXCEPT_REF:
    case WebAssembly::SELECT_F32:
    case WebAssembly::SELECT_F64:
    case WebAssembly::SELECT_I32:
    case WebAssembly::SELECT_I64:
    case WebAssembly::SET_GLOBAL_EXCEPT_REF:
    case WebAssembly::SET_GLOBAL_F32:
    case WebAssembly::SET_GLOBAL_F64:
    case WebAssembly::SET_GLOBAL_I32:
    case WebAssembly::SET_GLOBAL_I64:
    case WebAssembly::SET_GLOBAL_V128:
    case WebAssembly::SET_LOCAL_EXCEPT_REF:
    case WebAssembly::SET_LOCAL_F32:
    case WebAssembly::SET_LOCAL_F64:
    case WebAssembly::SET_LOCAL_I32:
    case WebAssembly::SET_LOCAL_I64:
    case WebAssembly::SET_LOCAL_V128:
    case WebAssembly::SHL_I32:
    case WebAssembly::SHL_I64:
    case WebAssembly::SHR_S_I32:
    case WebAssembly::SHR_S_I64:
    case WebAssembly::SHR_U_I32:
    case WebAssembly::SHR_U_I64:
    case WebAssembly::SQRT_F32:
    case WebAssembly::SQRT_F64:
    case WebAssembly::STORE16_I32:
    case WebAssembly::STORE16_I64:
    case WebAssembly::STORE32_I64:
    case WebAssembly::STORE8_I32:
    case WebAssembly::STORE8_I64:
    case WebAssembly::STORE_F32:
    case WebAssembly::STORE_F64:
    case WebAssembly::STORE_I32:
    case WebAssembly::STORE_I64:
    case WebAssembly::SUB_F32:
    case WebAssembly::SUB_F32x4:
    case WebAssembly::SUB_F64:
    case WebAssembly::SUB_I16x8:
    case WebAssembly::SUB_I32:
    case WebAssembly::SUB_I32x4:
    case WebAssembly::SUB_I64:
    case WebAssembly::SUB_I8x16:
    case WebAssembly::TEE_EXCEPT_REF:
    case WebAssembly::TEE_F32:
    case WebAssembly::TEE_F64:
    case WebAssembly::TEE_I32:
    case WebAssembly::TEE_I64:
    case WebAssembly::TEE_LOCAL_EXCEPT_REF:
    case WebAssembly::TEE_LOCAL_F32:
    case WebAssembly::TEE_LOCAL_F64:
    case WebAssembly::TEE_LOCAL_I32:
    case WebAssembly::TEE_LOCAL_I64:
    case WebAssembly::TEE_LOCAL_V128:
    case WebAssembly::TEE_V128:
    case WebAssembly::THROW_I32:
    case WebAssembly::THROW_I64:
    case WebAssembly::TRUNC_F32:
    case WebAssembly::TRUNC_F64:
    case WebAssembly::TRY:
    case WebAssembly::UNREACHABLE:
    case WebAssembly::XOR_I32:
    case WebAssembly::XOR_I64: {
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

#ifdef ENABLE_INSTR_PREDICATE_VERIFIER
#undef ENABLE_INSTR_PREDICATE_VERIFIER
#include <sstream>

// Flags for subtarget features that participate in instruction matching.
enum SubtargetFeatureFlag : uint8_t {
  Feature_HasSIMD128 = (1ULL << 3),
  Feature_HasAtomics = (1ULL << 0),
  Feature_HasNontrappingFPToInt = (1ULL << 2),
  Feature_NotHasNontrappingFPToInt = (1ULL << 6),
  Feature_HasSignExt = (1ULL << 4),
  Feature_NotHasSignExt = (1ULL << 7),
  Feature_HasExceptionHandling = (1ULL << 1),
  Feature_NotHasExceptionHandling = (1ULL << 5),
  Feature_None = 0
};

#ifndef NDEBUG
static const char *SubtargetFeatureNames[] = {
  "Feature_HasAtomics",
  "Feature_HasExceptionHandling",
  "Feature_HasNontrappingFPToInt",
  "Feature_HasSIMD128",
  "Feature_HasSignExt",
  "Feature_NotHasExceptionHandling",
  "Feature_NotHasNontrappingFPToInt",
  "Feature_NotHasSignExt",
  nullptr
};

#endif // NDEBUG
uint64_t WebAssemblyMCCodeEmitter::
computeAvailableFeatures(const FeatureBitset& FB) const {
  uint64_t Features = 0;
  if ((FB[WebAssembly::FeatureSIMD128]))
    Features |= Feature_HasSIMD128;
  if ((FB[WebAssembly::FeatureAtomics]))
    Features |= Feature_HasAtomics;
  if ((FB[WebAssembly::FeatureNontrappingFPToInt]))
    Features |= Feature_HasNontrappingFPToInt;
  if ((!FB[WebAssembly::FeatureNontrappingFPToInt]))
    Features |= Feature_NotHasNontrappingFPToInt;
  if ((FB[WebAssembly::FeatureSignExt]))
    Features |= Feature_HasSignExt;
  if ((!FB[WebAssembly::FeatureSignExt]))
    Features |= Feature_NotHasSignExt;
  if ((FB[WebAssembly::FeatureExceptionHandling]))
    Features |= Feature_HasExceptionHandling;
  if ((!FB[WebAssembly::FeatureExceptionHandling]))
    Features |= Feature_NotHasExceptionHandling;
  return Features;
}

void WebAssemblyMCCodeEmitter::verifyInstructionPredicates(
    const MCInst &Inst, uint64_t AvailableFeatures) const {
#ifndef NDEBUG
  static uint64_t RequiredFeatures[] = {
    0, // PHI = 0
    0, // INLINEASM = 1
    0, // CFI_INSTRUCTION = 2
    0, // EH_LABEL = 3
    0, // GC_LABEL = 4
    0, // ANNOTATION_LABEL = 5
    0, // KILL = 6
    0, // EXTRACT_SUBREG = 7
    0, // INSERT_SUBREG = 8
    0, // IMPLICIT_DEF = 9
    0, // SUBREG_TO_REG = 10
    0, // COPY_TO_REGCLASS = 11
    0, // DBG_VALUE = 12
    0, // DBG_LABEL = 13
    0, // REG_SEQUENCE = 14
    0, // COPY = 15
    0, // BUNDLE = 16
    0, // LIFETIME_START = 17
    0, // LIFETIME_END = 18
    0, // STACKMAP = 19
    0, // FENTRY_CALL = 20
    0, // PATCHPOINT = 21
    0, // LOAD_STACK_GUARD = 22
    0, // STATEPOINT = 23
    0, // LOCAL_ESCAPE = 24
    0, // FAULTING_OP = 25
    0, // PATCHABLE_OP = 26
    0, // PATCHABLE_FUNCTION_ENTER = 27
    0, // PATCHABLE_RET = 28
    0, // PATCHABLE_FUNCTION_EXIT = 29
    0, // PATCHABLE_TAIL_CALL = 30
    0, // PATCHABLE_EVENT_CALL = 31
    0, // PATCHABLE_TYPED_EVENT_CALL = 32
    0, // ICALL_BRANCH_FUNNEL = 33
    0, // G_ADD = 34
    0, // G_SUB = 35
    0, // G_MUL = 36
    0, // G_SDIV = 37
    0, // G_UDIV = 38
    0, // G_SREM = 39
    0, // G_UREM = 40
    0, // G_AND = 41
    0, // G_OR = 42
    0, // G_XOR = 43
    0, // G_IMPLICIT_DEF = 44
    0, // G_PHI = 45
    0, // G_FRAME_INDEX = 46
    0, // G_GLOBAL_VALUE = 47
    0, // G_EXTRACT = 48
    0, // G_UNMERGE_VALUES = 49
    0, // G_INSERT = 50
    0, // G_MERGE_VALUES = 51
    0, // G_PTRTOINT = 52
    0, // G_INTTOPTR = 53
    0, // G_BITCAST = 54
    0, // G_LOAD = 55
    0, // G_SEXTLOAD = 56
    0, // G_ZEXTLOAD = 57
    0, // G_STORE = 58
    0, // G_ATOMIC_CMPXCHG_WITH_SUCCESS = 59
    0, // G_ATOMIC_CMPXCHG = 60
    0, // G_ATOMICRMW_XCHG = 61
    0, // G_ATOMICRMW_ADD = 62
    0, // G_ATOMICRMW_SUB = 63
    0, // G_ATOMICRMW_AND = 64
    0, // G_ATOMICRMW_NAND = 65
    0, // G_ATOMICRMW_OR = 66
    0, // G_ATOMICRMW_XOR = 67
    0, // G_ATOMICRMW_MAX = 68
    0, // G_ATOMICRMW_MIN = 69
    0, // G_ATOMICRMW_UMAX = 70
    0, // G_ATOMICRMW_UMIN = 71
    0, // G_BRCOND = 72
    0, // G_BRINDIRECT = 73
    0, // G_INTRINSIC = 74
    0, // G_INTRINSIC_W_SIDE_EFFECTS = 75
    0, // G_ANYEXT = 76
    0, // G_TRUNC = 77
    0, // G_CONSTANT = 78
    0, // G_FCONSTANT = 79
    0, // G_VASTART = 80
    0, // G_VAARG = 81
    0, // G_SEXT = 82
    0, // G_ZEXT = 83
    0, // G_SHL = 84
    0, // G_LSHR = 85
    0, // G_ASHR = 86
    0, // G_ICMP = 87
    0, // G_FCMP = 88
    0, // G_SELECT = 89
    0, // G_UADDE = 90
    0, // G_USUBE = 91
    0, // G_SADDO = 92
    0, // G_SSUBO = 93
    0, // G_UMULO = 94
    0, // G_SMULO = 95
    0, // G_UMULH = 96
    0, // G_SMULH = 97
    0, // G_FADD = 98
    0, // G_FSUB = 99
    0, // G_FMUL = 100
    0, // G_FMA = 101
    0, // G_FDIV = 102
    0, // G_FREM = 103
    0, // G_FPOW = 104
    0, // G_FEXP = 105
    0, // G_FEXP2 = 106
    0, // G_FLOG = 107
    0, // G_FLOG2 = 108
    0, // G_FNEG = 109
    0, // G_FPEXT = 110
    0, // G_FPTRUNC = 111
    0, // G_FPTOSI = 112
    0, // G_FPTOUI = 113
    0, // G_SITOFP = 114
    0, // G_UITOFP = 115
    0, // G_FABS = 116
    0, // G_GEP = 117
    0, // G_PTR_MASK = 118
    0, // G_BR = 119
    0, // G_INSERT_VECTOR_ELT = 120
    0, // G_EXTRACT_VECTOR_ELT = 121
    0, // G_SHUFFLE_VECTOR = 122
    0, // G_BSWAP = 123
    0, // ABS_F32 = 124
    0, // ABS_F64 = 125
    0, // ADD_F32 = 126
    Feature_HasSIMD128 | 0, // ADD_F32x4 = 127
    0, // ADD_F64 = 128
    Feature_HasSIMD128 | 0, // ADD_I16x8 = 129
    0, // ADD_I32 = 130
    Feature_HasSIMD128 | 0, // ADD_I32x4 = 131
    0, // ADD_I64 = 132
    Feature_HasSIMD128 | 0, // ADD_I8x16 = 133
    0, // ADJCALLSTACKDOWN = 134
    0, // ADJCALLSTACKUP = 135
    0, // AND_I32 = 136
    0, // AND_I64 = 137
    0, // ARGUMENT_EXCEPT_REF = 138
    0, // ARGUMENT_F32 = 139
    0, // ARGUMENT_F64 = 140
    0, // ARGUMENT_I32 = 141
    0, // ARGUMENT_I64 = 142
    Feature_HasSIMD128 | 0, // ARGUMENT_v16i8 = 143
    Feature_HasSIMD128 | 0, // ARGUMENT_v4f32 = 144
    Feature_HasSIMD128 | 0, // ARGUMENT_v4i32 = 145
    Feature_HasSIMD128 | 0, // ARGUMENT_v8i16 = 146
    0, // ATOMIC_LOAD16_U_I32 = 147
    0, // ATOMIC_LOAD16_U_I64 = 148
    0, // ATOMIC_LOAD32_U_I64 = 149
    0, // ATOMIC_LOAD8_U_I32 = 150
    0, // ATOMIC_LOAD8_U_I64 = 151
    0, // ATOMIC_LOAD_I32 = 152
    0, // ATOMIC_LOAD_I64 = 153
    0, // BLOCK = 154
    0, // BR = 155
    0, // BR_IF = 156
    0, // BR_TABLE_I32 = 157
    0, // BR_TABLE_I64 = 158
    0, // BR_UNLESS = 159
    0, // CALL_EXCEPT_REF = 160
    0, // CALL_F32 = 161
    0, // CALL_F64 = 162
    0, // CALL_I32 = 163
    0, // CALL_I64 = 164
    0, // CALL_INDIRECT_EXCEPT_REF = 165
    0, // CALL_INDIRECT_F32 = 166
    0, // CALL_INDIRECT_F64 = 167
    0, // CALL_INDIRECT_I32 = 168
    0, // CALL_INDIRECT_I64 = 169
    0, // CALL_INDIRECT_VOID = 170
    Feature_HasSIMD128 | 0, // CALL_INDIRECT_v16i8 = 171
    Feature_HasSIMD128 | 0, // CALL_INDIRECT_v4f32 = 172
    Feature_HasSIMD128 | 0, // CALL_INDIRECT_v4i32 = 173
    Feature_HasSIMD128 | 0, // CALL_INDIRECT_v8i16 = 174
    0, // CALL_VOID = 175
    Feature_HasSIMD128 | 0, // CALL_v16i8 = 176
    Feature_HasSIMD128 | 0, // CALL_v4f32 = 177
    Feature_HasSIMD128 | 0, // CALL_v4i32 = 178
    Feature_HasSIMD128 | 0, // CALL_v8i16 = 179
    0, // CATCHRET = 180
    0, // CATCH_ALL = 181
    0, // CATCH_I32 = 182
    0, // CATCH_I64 = 183
    0, // CEIL_F32 = 184
    0, // CEIL_F64 = 185
    0, // CLEANUPRET = 186
    0, // CLZ_I32 = 187
    0, // CLZ_I64 = 188
    0, // CONST_F32 = 189
    0, // CONST_F64 = 190
    0, // CONST_I32 = 191
    0, // CONST_I64 = 192
    0, // COPYSIGN_F32 = 193
    0, // COPYSIGN_F64 = 194
    Feature_HasExceptionHandling | 0, // COPY_EXCEPT_REF = 195
    0, // COPY_F32 = 196
    0, // COPY_F64 = 197
    0, // COPY_I32 = 198
    0, // COPY_I64 = 199
    Feature_HasSIMD128 | 0, // COPY_V128 = 200
    0, // CTZ_I32 = 201
    0, // CTZ_I64 = 202
    0, // CURRENT_MEMORY_I32 = 203
    0, // DIV_F32 = 204
    0, // DIV_F64 = 205
    0, // DIV_S_I32 = 206
    0, // DIV_S_I64 = 207
    0, // DIV_U_I32 = 208
    0, // DIV_U_I64 = 209
    Feature_HasExceptionHandling | 0, // DROP_EXCEPT_REF = 210
    0, // DROP_F32 = 211
    0, // DROP_F64 = 212
    0, // DROP_I32 = 213
    0, // DROP_I64 = 214
    Feature_HasSIMD128 | 0, // DROP_V128 = 215
    0, // END_BLOCK = 216
    0, // END_FUNCTION = 217
    0, // END_LOOP = 218
    0, // END_TRY = 219
    0, // EQZ_I32 = 220
    0, // EQZ_I64 = 221
    0, // EQ_F32 = 222
    0, // EQ_F64 = 223
    0, // EQ_I32 = 224
    0, // EQ_I64 = 225
    0, // F32_CONVERT_S_I32 = 226
    0, // F32_CONVERT_S_I64 = 227
    0, // F32_CONVERT_U_I32 = 228
    0, // F32_CONVERT_U_I64 = 229
    0, // F32_DEMOTE_F64 = 230
    0, // F32_REINTERPRET_I32 = 231
    0, // F64_CONVERT_S_I32 = 232
    0, // F64_CONVERT_S_I64 = 233
    0, // F64_CONVERT_U_I32 = 234
    0, // F64_CONVERT_U_I64 = 235
    0, // F64_PROMOTE_F32 = 236
    0, // F64_REINTERPRET_I64 = 237
    0, // FALLTHROUGH_RETURN_EXCEPT_REF = 238
    0, // FALLTHROUGH_RETURN_F32 = 239
    0, // FALLTHROUGH_RETURN_F64 = 240
    0, // FALLTHROUGH_RETURN_I32 = 241
    0, // FALLTHROUGH_RETURN_I64 = 242
    0, // FALLTHROUGH_RETURN_VOID = 243
    Feature_HasSIMD128 | 0, // FALLTHROUGH_RETURN_v16i8 = 244
    Feature_HasSIMD128 | 0, // FALLTHROUGH_RETURN_v4f32 = 245
    Feature_HasSIMD128 | 0, // FALLTHROUGH_RETURN_v4i32 = 246
    Feature_HasSIMD128 | 0, // FALLTHROUGH_RETURN_v8i16 = 247
    0, // FLOOR_F32 = 248
    0, // FLOOR_F64 = 249
    Feature_NotHasNontrappingFPToInt | 0, // FP_TO_SINT_I32_F32 = 250
    Feature_NotHasNontrappingFPToInt | 0, // FP_TO_SINT_I32_F64 = 251
    Feature_NotHasNontrappingFPToInt | 0, // FP_TO_SINT_I64_F32 = 252
    Feature_NotHasNontrappingFPToInt | 0, // FP_TO_SINT_I64_F64 = 253
    Feature_NotHasNontrappingFPToInt | 0, // FP_TO_UINT_I32_F32 = 254
    Feature_NotHasNontrappingFPToInt | 0, // FP_TO_UINT_I32_F64 = 255
    Feature_NotHasNontrappingFPToInt | 0, // FP_TO_UINT_I64_F32 = 256
    Feature_NotHasNontrappingFPToInt | 0, // FP_TO_UINT_I64_F64 = 257
    Feature_HasExceptionHandling | 0, // GET_GLOBAL_EXCEPT_REF = 258
    0, // GET_GLOBAL_F32 = 259
    0, // GET_GLOBAL_F64 = 260
    0, // GET_GLOBAL_I32 = 261
    0, // GET_GLOBAL_I64 = 262
    Feature_HasSIMD128 | 0, // GET_GLOBAL_V128 = 263
    Feature_HasExceptionHandling | 0, // GET_LOCAL_EXCEPT_REF = 264
    0, // GET_LOCAL_F32 = 265
    0, // GET_LOCAL_F64 = 266
    0, // GET_LOCAL_I32 = 267
    0, // GET_LOCAL_I64 = 268
    Feature_HasSIMD128 | 0, // GET_LOCAL_V128 = 269
    0, // GE_F32 = 270
    0, // GE_F64 = 271
    0, // GE_S_I32 = 272
    0, // GE_S_I64 = 273
    0, // GE_U_I32 = 274
    0, // GE_U_I64 = 275
    0, // GROW_MEMORY_I32 = 276
    0, // GT_F32 = 277
    0, // GT_F64 = 278
    0, // GT_S_I32 = 279
    0, // GT_S_I64 = 280
    0, // GT_U_I32 = 281
    0, // GT_U_I64 = 282
    Feature_HasSignExt | 0, // I32_EXTEND16_S_I32 = 283
    Feature_HasSignExt | 0, // I32_EXTEND8_S_I32 = 284
    0, // I32_REINTERPRET_F32 = 285
    0, // I32_TRUNC_S_F32 = 286
    0, // I32_TRUNC_S_F64 = 287
    Feature_HasNontrappingFPToInt | 0, // I32_TRUNC_S_SAT_F32 = 288
    Feature_HasNontrappingFPToInt | 0, // I32_TRUNC_S_SAT_F64 = 289
    0, // I32_TRUNC_U_F32 = 290
    0, // I32_TRUNC_U_F64 = 291
    Feature_HasNontrappingFPToInt | 0, // I32_TRUNC_U_SAT_F32 = 292
    Feature_HasNontrappingFPToInt | 0, // I32_TRUNC_U_SAT_F64 = 293
    0, // I32_WRAP_I64 = 294
    Feature_HasSignExt | 0, // I64_EXTEND16_S_I64 = 295
    Feature_HasSignExt | 0, // I64_EXTEND32_S_I64 = 296
    Feature_HasSignExt | 0, // I64_EXTEND8_S_I64 = 297
    0, // I64_EXTEND_S_I32 = 298
    0, // I64_EXTEND_U_I32 = 299
    0, // I64_REINTERPRET_F64 = 300
    0, // I64_TRUNC_S_F32 = 301
    0, // I64_TRUNC_S_F64 = 302
    Feature_HasNontrappingFPToInt | 0, // I64_TRUNC_S_SAT_F32 = 303
    Feature_HasNontrappingFPToInt | 0, // I64_TRUNC_S_SAT_F64 = 304
    0, // I64_TRUNC_U_F32 = 305
    0, // I64_TRUNC_U_F64 = 306
    Feature_HasNontrappingFPToInt | 0, // I64_TRUNC_U_SAT_F32 = 307
    Feature_HasNontrappingFPToInt | 0, // I64_TRUNC_U_SAT_F64 = 308
    0, // LE_F32 = 309
    0, // LE_F64 = 310
    0, // LE_S_I32 = 311
    0, // LE_S_I64 = 312
    0, // LE_U_I32 = 313
    0, // LE_U_I64 = 314
    0, // LOAD16_S_I32 = 315
    0, // LOAD16_S_I64 = 316
    0, // LOAD16_U_I32 = 317
    0, // LOAD16_U_I64 = 318
    0, // LOAD32_S_I64 = 319
    0, // LOAD32_U_I64 = 320
    0, // LOAD8_S_I32 = 321
    0, // LOAD8_S_I64 = 322
    0, // LOAD8_U_I32 = 323
    0, // LOAD8_U_I64 = 324
    0, // LOAD_F32 = 325
    0, // LOAD_F64 = 326
    0, // LOAD_I32 = 327
    0, // LOAD_I64 = 328
    0, // LOOP = 329
    0, // LT_F32 = 330
    0, // LT_F64 = 331
    0, // LT_S_I32 = 332
    0, // LT_S_I64 = 333
    0, // LT_U_I32 = 334
    0, // LT_U_I64 = 335
    0, // MAX_F32 = 336
    0, // MAX_F64 = 337
    0, // MEMORY_GROW_I32 = 338
    0, // MEMORY_SIZE_I32 = 339
    0, // MEM_GROW_I32 = 340
    0, // MEM_SIZE_I32 = 341
    0, // MIN_F32 = 342
    0, // MIN_F64 = 343
    0, // MUL_F32 = 344
    Feature_HasSIMD128 | 0, // MUL_F32x4 = 345
    0, // MUL_F64 = 346
    Feature_HasSIMD128 | 0, // MUL_I16x8 = 347
    0, // MUL_I32 = 348
    Feature_HasSIMD128 | 0, // MUL_I32x4 = 349
    0, // MUL_I64 = 350
    Feature_HasSIMD128 | 0, // MUL_I8x16 = 351
    0, // NEAREST_F32 = 352
    0, // NEAREST_F64 = 353
    0, // NEG_F32 = 354
    0, // NEG_F64 = 355
    0, // NE_F32 = 356
    0, // NE_F64 = 357
    0, // NE_I32 = 358
    0, // NE_I64 = 359
    0, // NOP = 360
    0, // OR_I32 = 361
    0, // OR_I64 = 362
    0, // PCALL_INDIRECT_EXCEPT_REF = 363
    0, // PCALL_INDIRECT_F32 = 364
    0, // PCALL_INDIRECT_F64 = 365
    0, // PCALL_INDIRECT_I32 = 366
    0, // PCALL_INDIRECT_I64 = 367
    0, // PCALL_INDIRECT_VOID = 368
    Feature_HasSIMD128 | 0, // PCALL_INDIRECT_v16i8 = 369
    Feature_HasSIMD128 | 0, // PCALL_INDIRECT_v4f32 = 370
    Feature_HasSIMD128 | 0, // PCALL_INDIRECT_v4i32 = 371
    Feature_HasSIMD128 | 0, // PCALL_INDIRECT_v8i16 = 372
    0, // POPCNT_I32 = 373
    0, // POPCNT_I64 = 374
    0, // REM_S_I32 = 375
    0, // REM_S_I64 = 376
    0, // REM_U_I32 = 377
    0, // REM_U_I64 = 378
    0, // RETHROW = 379
    0, // RETURN_EXCEPT_REF = 380
    0, // RETURN_F32 = 381
    0, // RETURN_F64 = 382
    0, // RETURN_I32 = 383
    0, // RETURN_I64 = 384
    0, // RETURN_VOID = 385
    Feature_HasSIMD128 | 0, // RETURN_v16i8 = 386
    Feature_HasSIMD128 | 0, // RETURN_v4f32 = 387
    Feature_HasSIMD128 | 0, // RETURN_v4i32 = 388
    Feature_HasSIMD128 | 0, // RETURN_v8i16 = 389
    0, // ROTL_I32 = 390
    0, // ROTL_I64 = 391
    0, // ROTR_I32 = 392
    0, // ROTR_I64 = 393
    0, // SELECT_EXCEPT_REF = 394
    0, // SELECT_F32 = 395
    0, // SELECT_F64 = 396
    0, // SELECT_I32 = 397
    0, // SELECT_I64 = 398
    Feature_HasExceptionHandling | 0, // SET_GLOBAL_EXCEPT_REF = 399
    0, // SET_GLOBAL_F32 = 400
    0, // SET_GLOBAL_F64 = 401
    0, // SET_GLOBAL_I32 = 402
    0, // SET_GLOBAL_I64 = 403
    Feature_HasSIMD128 | 0, // SET_GLOBAL_V128 = 404
    Feature_HasExceptionHandling | 0, // SET_LOCAL_EXCEPT_REF = 405
    0, // SET_LOCAL_F32 = 406
    0, // SET_LOCAL_F64 = 407
    0, // SET_LOCAL_I32 = 408
    0, // SET_LOCAL_I64 = 409
    Feature_HasSIMD128 | 0, // SET_LOCAL_V128 = 410
    0, // SHL_I32 = 411
    0, // SHL_I64 = 412
    0, // SHR_S_I32 = 413
    0, // SHR_S_I64 = 414
    0, // SHR_U_I32 = 415
    0, // SHR_U_I64 = 416
    0, // SQRT_F32 = 417
    0, // SQRT_F64 = 418
    0, // STORE16_I32 = 419
    0, // STORE16_I64 = 420
    0, // STORE32_I64 = 421
    0, // STORE8_I32 = 422
    0, // STORE8_I64 = 423
    0, // STORE_F32 = 424
    0, // STORE_F64 = 425
    0, // STORE_I32 = 426
    0, // STORE_I64 = 427
    0, // SUB_F32 = 428
    Feature_HasSIMD128 | 0, // SUB_F32x4 = 429
    0, // SUB_F64 = 430
    Feature_HasSIMD128 | 0, // SUB_I16x8 = 431
    0, // SUB_I32 = 432
    Feature_HasSIMD128 | 0, // SUB_I32x4 = 433
    0, // SUB_I64 = 434
    Feature_HasSIMD128 | 0, // SUB_I8x16 = 435
    Feature_HasExceptionHandling | 0, // TEE_EXCEPT_REF = 436
    0, // TEE_F32 = 437
    0, // TEE_F64 = 438
    0, // TEE_I32 = 439
    0, // TEE_I64 = 440
    Feature_HasExceptionHandling | 0, // TEE_LOCAL_EXCEPT_REF = 441
    0, // TEE_LOCAL_F32 = 442
    0, // TEE_LOCAL_F64 = 443
    0, // TEE_LOCAL_I32 = 444
    0, // TEE_LOCAL_I64 = 445
    Feature_HasSIMD128 | 0, // TEE_LOCAL_V128 = 446
    Feature_HasSIMD128 | 0, // TEE_V128 = 447
    0, // THROW_I32 = 448
    0, // THROW_I64 = 449
    0, // TRUNC_F32 = 450
    0, // TRUNC_F64 = 451
    0, // TRY = 452
    0, // UNREACHABLE = 453
    0, // XOR_I32 = 454
    0, // XOR_I64 = 455
  };

  assert(Inst.getOpcode() < 456);
  uint64_t MissingFeatures =
      (AvailableFeatures & RequiredFeatures[Inst.getOpcode()]) ^
      RequiredFeatures[Inst.getOpcode()];
  if (MissingFeatures) {
    std::ostringstream Msg;
    Msg << "Attempting to emit " << MCII.getName(Inst.getOpcode()).str()
        << " instruction but the ";
    for (unsigned i = 0; i < 8 * sizeof(MissingFeatures); ++i)
      if (MissingFeatures & (1ULL << i))
        Msg << SubtargetFeatureNames[i] << " ";
    Msg << "predicate(s) are not met";
    report_fatal_error(Msg.str());
  }
#else
// Silence unused variable warning on targets that don't use MCII for other purposes (e.g. BPF).
(void)MCII;
#endif // NDEBUG
}
#endif
