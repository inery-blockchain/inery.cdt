/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void WebAssemblyInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'b', 'r', 32, 32, 32, 32, 32, 32, 9, 0,
  /* 10 */ 't', 'r', 'y', 32, 32, 32, 32, 32, 9, 0,
  /* 20 */ 'c', 'a', 'l', 'l', 32, 32, 32, 32, 9, 0,
  /* 30 */ 'l', 'o', 'o', 'p', 32, 32, 32, 32, 9, 0,
  /* 40 */ 'b', 'r', '_', 'i', 'f', 32, 32, 32, 9, 0,
  /* 50 */ 'i', '3', '2', '.', 'c', 'a', 't', 'c', 'h', 32, 32, 32, 9, 0,
  /* 64 */ 'i', '6', '4', '.', 'c', 'a', 't', 'c', 'h', 32, 32, 32, 9, 0,
  /* 78 */ 'b', 'l', 'o', 'c', 'k', 32, 32, 32, 9, 0,
  /* 88 */ 't', 'h', 'r', 'o', 'w', 32, 32, 32, 9, 0,
  /* 98 */ 'f', '3', '2', '.', 'g', 'e', 32, 32, 9, 0,
  /* 108 */ 'f', '6', '4', '.', 'g', 'e', 32, 32, 9, 0,
  /* 118 */ 'f', '3', '2', '.', 'l', 'e', 32, 32, 9, 0,
  /* 128 */ 'f', '6', '4', '.', 'l', 'e', 32, 32, 9, 0,
  /* 138 */ 'f', '3', '2', '.', 'n', 'e', 32, 32, 9, 0,
  /* 148 */ 'i', '3', '2', '.', 'n', 'e', 32, 32, 9, 0,
  /* 158 */ 'f', '6', '4', '.', 'n', 'e', 32, 32, 9, 0,
  /* 168 */ 'i', '6', '4', '.', 'n', 'e', 32, 32, 9, 0,
  /* 178 */ 'r', 'e', 't', 'u', 'r', 'n', 32, 32, 9, 0,
  /* 188 */ 'f', '3', '2', '.', 'e', 'q', 32, 32, 9, 0,
  /* 198 */ 'i', '3', '2', '.', 'e', 'q', 32, 32, 9, 0,
  /* 208 */ 'f', '6', '4', '.', 'e', 'q', 32, 32, 9, 0,
  /* 218 */ 'i', '6', '4', '.', 'e', 'q', 32, 32, 9, 0,
  /* 228 */ 'i', '3', '2', '.', 'o', 'r', 32, 32, 9, 0,
  /* 238 */ 'i', '6', '4', '.', 'o', 'r', 32, 32, 9, 0,
  /* 248 */ 'f', '3', '2', '.', 'g', 't', 32, 32, 9, 0,
  /* 258 */ 'f', '6', '4', '.', 'g', 't', 32, 32, 9, 0,
  /* 268 */ 'f', '3', '2', '.', 'l', 't', 32, 32, 9, 0,
  /* 278 */ 'f', '6', '4', '.', 'l', 't', 32, 32, 9, 0,
  /* 288 */ 'f', '3', '2', '.', 's', 'u', 'b', 32, 9, 0,
  /* 298 */ 'i', '3', '2', '.', 's', 'u', 'b', 32, 9, 0,
  /* 308 */ 'f', '6', '4', '.', 's', 'u', 'b', 32, 9, 0,
  /* 318 */ 'i', '6', '4', '.', 's', 'u', 'b', 32, 9, 0,
  /* 328 */ 'f', '3', '2', 'x', '4', '.', 's', 'u', 'b', 32, 9, 0,
  /* 340 */ 'i', '3', '2', 'x', '4', '.', 's', 'u', 'b', 32, 9, 0,
  /* 352 */ 'i', '8', 'x', '1', '6', '.', 's', 'u', 'b', 32, 9, 0,
  /* 364 */ 'i', '1', '6', 'x', '8', '.', 's', 'u', 'b', 32, 9, 0,
  /* 376 */ 'f', '3', '2', '.', 'a', 'd', 'd', 32, 9, 0,
  /* 386 */ 'i', '3', '2', '.', 'a', 'd', 'd', 32, 9, 0,
  /* 396 */ 'f', '6', '4', '.', 'a', 'd', 'd', 32, 9, 0,
  /* 406 */ 'i', '6', '4', '.', 'a', 'd', 'd', 32, 9, 0,
  /* 416 */ 'f', '3', '2', 'x', '4', '.', 'a', 'd', 'd', 32, 9, 0,
  /* 428 */ 'i', '3', '2', 'x', '4', '.', 'a', 'd', 'd', 32, 9, 0,
  /* 440 */ 'i', '8', 'x', '1', '6', '.', 'a', 'd', 'd', 32, 9, 0,
  /* 452 */ 'i', '1', '6', 'x', '8', '.', 'a', 'd', 'd', 32, 9, 0,
  /* 464 */ 'i', '3', '2', '.', 'a', 'n', 'd', 32, 9, 0,
  /* 474 */ 'i', '6', '4', '.', 'a', 'n', 'd', 32, 9, 0,
  /* 484 */ 'b', 'r', '_', 't', 'a', 'b', 'l', 'e', 32, 9, 0,
  /* 495 */ 'f', '3', '2', '.', 'n', 'e', 'g', 32, 9, 0,
  /* 505 */ 'f', '6', '4', '.', 'n', 'e', 'g', 32, 9, 0,
  /* 515 */ 'i', '3', '2', '.', 's', 'h', 'l', 32, 9, 0,
  /* 525 */ 'i', '6', '4', '.', 's', 'h', 'l', 32, 9, 0,
  /* 535 */ 'f', '3', '2', '.', 'm', 'u', 'l', 32, 9, 0,
  /* 545 */ 'i', '3', '2', '.', 'm', 'u', 'l', 32, 9, 0,
  /* 555 */ 'f', '6', '4', '.', 'm', 'u', 'l', 32, 9, 0,
  /* 565 */ 'i', '6', '4', '.', 'm', 'u', 'l', 32, 9, 0,
  /* 575 */ 'f', '3', '2', 'x', '4', '.', 'm', 'u', 'l', 32, 9, 0,
  /* 587 */ 'i', '3', '2', 'x', '4', '.', 'm', 'u', 'l', 32, 9, 0,
  /* 599 */ 'i', '8', 'x', '1', '6', '.', 'm', 'u', 'l', 32, 9, 0,
  /* 611 */ 'i', '1', '6', 'x', '8', '.', 'm', 'u', 'l', 32, 9, 0,
  /* 623 */ 'f', '3', '2', '.', 'm', 'i', 'n', 32, 9, 0,
  /* 633 */ 'f', '6', '4', '.', 'm', 'i', 'n', 32, 9, 0,
  /* 643 */ 'i', '3', '2', '.', 'x', 'o', 'r', 32, 9, 0,
  /* 653 */ 'i', '6', '4', '.', 'x', 'o', 'r', 32, 9, 0,
  /* 663 */ 'f', '3', '2', '.', 'a', 'b', 's', 32, 9, 0,
  /* 673 */ 'f', '6', '4', '.', 'a', 'b', 's', 32, 9, 0,
  /* 683 */ 'f', '3', '2', '.', 'd', 'i', 'v', 32, 9, 0,
  /* 693 */ 'f', '6', '4', '.', 'd', 'i', 'v', 32, 9, 0,
  /* 703 */ 'r', 'e', 't', 'h', 'r', 'o', 'w', 32, 9, 0,
  /* 713 */ 'f', '3', '2', '.', 'm', 'a', 'x', 32, 9, 0,
  /* 723 */ 'f', '6', '4', '.', 'm', 'a', 'x', 32, 9, 0,
  /* 733 */ 'i', '3', '2', '.', 'c', 'l', 'z', 32, 9, 0,
  /* 743 */ 'i', '6', '4', '.', 'c', 'l', 'z', 32, 9, 0,
  /* 753 */ 'i', '3', '2', '.', 'e', 'q', 'z', 32, 9, 0,
  /* 763 */ 'i', '6', '4', '.', 'e', 'q', 'z', 32, 9, 0,
  /* 773 */ 'i', '3', '2', '.', 'c', 't', 'z', 32, 9, 0,
  /* 783 */ 'i', '6', '4', '.', 'c', 't', 'z', 32, 9, 0,
  /* 793 */ 'i', '6', '4', '.', 's', 't', 'o', 'r', 'e', '3', '2', 9, 0,
  /* 806 */ 'f', '6', '4', '.', 'p', 'r', 'o', 'm', 'o', 't', 'e', '/', 'f', '3', '2', 9, 0,
  /* 823 */ 'i', '3', '2', '.', 't', 'r', 'u', 'n', 'c', '_', 's', '/', 'f', '3', '2', 9, 0,
  /* 840 */ 'i', '6', '4', '.', 't', 'r', 'u', 'n', 'c', '_', 's', '/', 'f', '3', '2', 9, 0,
  /* 857 */ 'i', '3', '2', '.', 't', 'r', 'u', 'n', 'c', '_', 's', ':', 's', 'a', 't', '/', 'f', '3', '2', 9, 0,
  /* 878 */ 'i', '6', '4', '.', 't', 'r', 'u', 'n', 'c', '_', 's', ':', 's', 'a', 't', '/', 'f', '3', '2', 9, 0,
  /* 899 */ 'i', '3', '2', '.', 't', 'r', 'u', 'n', 'c', '_', 'u', ':', 's', 'a', 't', '/', 'f', '3', '2', 9, 0,
  /* 920 */ 'i', '6', '4', '.', 't', 'r', 'u', 'n', 'c', '_', 'u', ':', 's', 'a', 't', '/', 'f', '3', '2', 9, 0,
  /* 941 */ 'i', '3', '2', '.', 'r', 'e', 'i', 'n', 't', 'e', 'r', 'p', 'r', 'e', 't', '/', 'f', '3', '2', 9, 0,
  /* 962 */ 'i', '3', '2', '.', 't', 'r', 'u', 'n', 'c', '_', 'u', '/', 'f', '3', '2', 9, 0,
  /* 979 */ 'i', '6', '4', '.', 't', 'r', 'u', 'n', 'c', '_', 'u', '/', 'f', '3', '2', 9, 0,
  /* 996 */ 'i', '6', '4', '.', 'e', 'x', 't', 'e', 'n', 'd', '_', 's', '/', 'i', '3', '2', 9, 0,
  /* 1014 */ 'f', '3', '2', '.', 'c', 'o', 'n', 'v', 'e', 'r', 't', '_', 's', '/', 'i', '3', '2', 9, 0,
  /* 1033 */ 'f', '6', '4', '.', 'c', 'o', 'n', 'v', 'e', 'r', 't', '_', 's', '/', 'i', '3', '2', 9, 0,
  /* 1052 */ 'f', '3', '2', '.', 'r', 'e', 'i', 'n', 't', 'e', 'r', 'p', 'r', 'e', 't', '/', 'i', '3', '2', 9, 0,
  /* 1073 */ 'i', '6', '4', '.', 'e', 'x', 't', 'e', 'n', 'd', '_', 'u', '/', 'i', '3', '2', 9, 0,
  /* 1091 */ 'f', '3', '2', '.', 'c', 'o', 'n', 'v', 'e', 'r', 't', '_', 'u', '/', 'i', '3', '2', 9, 0,
  /* 1110 */ 'f', '6', '4', '.', 'c', 'o', 'n', 'v', 'e', 'r', 't', '_', 'u', '/', 'i', '3', '2', 9, 0,
  /* 1129 */ 'f', '3', '2', '.', 'd', 'e', 'm', 'o', 't', 'e', '/', 'f', '6', '4', 9, 0,
  /* 1145 */ 'i', '3', '2', '.', 't', 'r', 'u', 'n', 'c', '_', 's', '/', 'f', '6', '4', 9, 0,
  /* 1162 */ 'i', '6', '4', '.', 't', 'r', 'u', 'n', 'c', '_', 's', '/', 'f', '6', '4', 9, 0,
  /* 1179 */ 'i', '3', '2', '.', 't', 'r', 'u', 'n', 'c', '_', 's', ':', 's', 'a', 't', '/', 'f', '6', '4', 9, 0,
  /* 1200 */ 'i', '6', '4', '.', 't', 'r', 'u', 'n', 'c', '_', 's', ':', 's', 'a', 't', '/', 'f', '6', '4', 9, 0,
  /* 1221 */ 'i', '3', '2', '.', 't', 'r', 'u', 'n', 'c', '_', 'u', ':', 's', 'a', 't', '/', 'f', '6', '4', 9, 0,
  /* 1242 */ 'i', '6', '4', '.', 't', 'r', 'u', 'n', 'c', '_', 'u', ':', 's', 'a', 't', '/', 'f', '6', '4', 9, 0,
  /* 1263 */ 'i', '6', '4', '.', 'r', 'e', 'i', 'n', 't', 'e', 'r', 'p', 'r', 'e', 't', '/', 'f', '6', '4', 9, 0,
  /* 1284 */ 'i', '3', '2', '.', 't', 'r', 'u', 'n', 'c', '_', 'u', '/', 'f', '6', '4', 9, 0,
  /* 1301 */ 'i', '6', '4', '.', 't', 'r', 'u', 'n', 'c', '_', 'u', '/', 'f', '6', '4', 9, 0,
  /* 1318 */ 'i', '3', '2', '.', 'w', 'r', 'a', 'p', '/', 'i', '6', '4', 9, 0,
  /* 1332 */ 'f', '3', '2', '.', 'c', 'o', 'n', 'v', 'e', 'r', 't', '_', 's', '/', 'i', '6', '4', 9, 0,
  /* 1351 */ 'f', '6', '4', '.', 'c', 'o', 'n', 'v', 'e', 'r', 't', '_', 's', '/', 'i', '6', '4', 9, 0,
  /* 1370 */ 'f', '6', '4', '.', 'r', 'e', 'i', 'n', 't', 'e', 'r', 'p', 'r', 'e', 't', '/', 'i', '6', '4', 9, 0,
  /* 1391 */ 'f', '3', '2', '.', 'c', 'o', 'n', 'v', 'e', 'r', 't', '_', 'u', '/', 'i', '6', '4', 9, 0,
  /* 1410 */ 'f', '6', '4', '.', 'c', 'o', 'n', 'v', 'e', 'r', 't', '_', 'u', '/', 'i', '6', '4', 9, 0,
  /* 1429 */ 'i', '3', '2', '.', 's', 't', 'o', 'r', 'e', '1', '6', 9, 0,
  /* 1442 */ 'i', '6', '4', '.', 's', 't', 'o', 'r', 'e', '1', '6', 9, 0,
  /* 1455 */ 'i', '3', '2', '.', 's', 't', 'o', 'r', 'e', '8', 9, 0,
  /* 1467 */ 'i', '6', '4', '.', 's', 't', 'o', 'r', 'e', '8', 9, 0,
  /* 1479 */ 'P', 'S', 'E', 'U', 'D', 'O', 32, 'C', 'A', 'L', 'L', 32, 'I', 'N', 'D', 'I', 'R', 'E', 'C', 'T', 9, 0,
  /* 1501 */ 'f', '3', '2', '.', 't', 'r', 'u', 'n', 'c', 9, 0,
  /* 1512 */ 'f', '6', '4', '.', 't', 'r', 'u', 'n', 'c', 9, 0,
  /* 1523 */ 'f', '3', '2', '.', 'l', 'o', 'a', 'd', 9, 0,
  /* 1533 */ 'i', '3', '2', '.', 'l', 'o', 'a', 'd', 9, 0,
  /* 1543 */ 'f', '6', '4', '.', 'l', 'o', 'a', 'd', 9, 0,
  /* 1553 */ 'i', '6', '4', '.', 'l', 'o', 'a', 'd', 9, 0,
  /* 1563 */ 'i', '3', '2', '.', 'a', 't', 'o', 'm', 'i', 'c', '.', 'l', 'o', 'a', 'd', 9, 0,
  /* 1580 */ 'i', '6', '4', '.', 'a', 't', 'o', 'm', 'i', 'c', '.', 'l', 'o', 'a', 'd', 9, 0,
  /* 1597 */ 'f', '3', '2', '.', 's', 't', 'o', 'r', 'e', 9, 0,
  /* 1608 */ 'i', '3', '2', '.', 's', 't', 'o', 'r', 'e', 9, 0,
  /* 1619 */ 'f', '6', '4', '.', 's', 't', 'o', 'r', 'e', 9, 0,
  /* 1630 */ 'i', '6', '4', '.', 's', 't', 'o', 'r', 'e', 9, 0,
  /* 1641 */ 'm', 'e', 'm', '.', 's', 'i', 'z', 'e', 9, 0,
  /* 1651 */ 'm', 'e', 'm', 'o', 'r', 'y', '.', 's', 'i', 'z', 'e', 9, 0,
  /* 1664 */ 'g', 'e', 't', '_', 'g', 'l', 'o', 'b', 'a', 'l', 9, 0,
  /* 1676 */ 's', 'e', 't', '_', 'g', 'l', 'o', 'b', 'a', 'l', 9, 0,
  /* 1688 */ 't', 'e', 'e', '_', 'l', 'o', 'c', 'a', 'l', 9, 0,
  /* 1699 */ 'g', 'e', 't', '_', 'l', 'o', 'c', 'a', 'l', 9, 0,
  /* 1710 */ 's', 'e', 't', '_', 'l', 'o', 'c', 'a', 'l', 9, 0,
  /* 1721 */ 'c', 'o', 'p', 'y', '_', 'l', 'o', 'c', 'a', 'l', 9, 0,
  /* 1733 */ 'f', '3', '2', '.', 'c', 'e', 'i', 'l', 9, 0,
  /* 1743 */ 'f', '6', '4', '.', 'c', 'e', 'i', 'l', 9, 0,
  /* 1753 */ 'f', '3', '2', '.', 'c', 'a', 'l', 'l', 9, 0,
  /* 1763 */ 'i', '3', '2', '.', 'c', 'a', 'l', 'l', 9, 0,
  /* 1773 */ 'f', '6', '4', '.', 'c', 'a', 'l', 'l', 9, 0,
  /* 1783 */ 'i', '6', '4', '.', 'c', 'a', 'l', 'l', 9, 0,
  /* 1793 */ 'f', '3', '2', 'x', '4', '.', 'c', 'a', 'l', 'l', 9, 0,
  /* 1805 */ 'i', '3', '2', 'x', '4', '.', 'c', 'a', 'l', 'l', 9, 0,
  /* 1817 */ 'i', '8', 'x', '1', '6', '.', 'c', 'a', 'l', 'l', 9, 0,
  /* 1829 */ 'i', '1', '6', 'x', '8', '.', 'c', 'a', 'l', 'l', 9, 0,
  /* 1841 */ 'e', 'x', 'c', 'e', 'p', 't', '_', 'r', 'e', 'f', '.', 'c', 'a', 'l', 'l', 9, 0,
  /* 1858 */ 'i', '3', '2', '.', 'r', 'o', 't', 'l', 9, 0,
  /* 1868 */ 'i', '6', '4', '.', 'r', 'o', 't', 'l', 9, 0,
  /* 1878 */ 'f', '3', '2', '.', 'c', 'o', 'p', 'y', 's', 'i', 'g', 'n', 9, 0,
  /* 1892 */ 'f', '6', '4', '.', 'c', 'o', 'p', 'y', 's', 'i', 'g', 'n', 9, 0,
  /* 1906 */ 'd', 'r', 'o', 'p', 9, 0,
  /* 1912 */ 'f', '3', '2', '.', 'f', 'l', 'o', 'o', 'r', 9, 0,
  /* 1923 */ 'f', '6', '4', '.', 'f', 'l', 'o', 'o', 'r', 9, 0,
  /* 1934 */ 'i', '3', '2', '.', 'r', 'o', 't', 'r', 9, 0,
  /* 1944 */ 'i', '6', '4', '.', 'r', 'o', 't', 'r', 9, 0,
  /* 1954 */ 'i', '6', '4', '.', 'l', 'o', 'a', 'd', '3', '2', '_', 's', 9, 0,
  /* 1968 */ 'i', '6', '4', '.', 'e', 'x', 't', 'e', 'n', 'd', '3', '2', '_', 's', 9, 0,
  /* 1984 */ 'i', '3', '2', '.', 'l', 'o', 'a', 'd', '1', '6', '_', 's', 9, 0,
  /* 1998 */ 'i', '6', '4', '.', 'l', 'o', 'a', 'd', '1', '6', '_', 's', 9, 0,
  /* 2012 */ 'i', '3', '2', '.', 'e', 'x', 't', 'e', 'n', 'd', '1', '6', '_', 's', 9, 0,
  /* 2028 */ 'i', '6', '4', '.', 'e', 'x', 't', 'e', 'n', 'd', '1', '6', '_', 's', 9, 0,
  /* 2044 */ 'i', '3', '2', '.', 'l', 'o', 'a', 'd', '8', '_', 's', 9, 0,
  /* 2057 */ 'i', '6', '4', '.', 'l', 'o', 'a', 'd', '8', '_', 's', 9, 0,
  /* 2070 */ 'i', '3', '2', '.', 'e', 'x', 't', 'e', 'n', 'd', '8', '_', 's', 9, 0,
  /* 2085 */ 'i', '6', '4', '.', 'e', 'x', 't', 'e', 'n', 'd', '8', '_', 's', 9, 0,
  /* 2100 */ 'i', '3', '2', '.', 'g', 'e', '_', 's', 9, 0,
  /* 2110 */ 'i', '6', '4', '.', 'g', 'e', '_', 's', 9, 0,
  /* 2120 */ 'i', '3', '2', '.', 'l', 'e', '_', 's', 9, 0,
  /* 2130 */ 'i', '6', '4', '.', 'l', 'e', '_', 's', 9, 0,
  /* 2140 */ 'i', '3', '2', '.', 'r', 'e', 'm', '_', 's', 9, 0,
  /* 2151 */ 'i', '6', '4', '.', 'r', 'e', 'm', '_', 's', 9, 0,
  /* 2162 */ 'i', '3', '2', '.', 's', 'h', 'r', '_', 's', 9, 0,
  /* 2173 */ 'i', '6', '4', '.', 's', 'h', 'r', '_', 's', 9, 0,
  /* 2184 */ 'i', '3', '2', '.', 'g', 't', '_', 's', 9, 0,
  /* 2194 */ 'i', '6', '4', '.', 'g', 't', '_', 's', 9, 0,
  /* 2204 */ 'i', '3', '2', '.', 'l', 't', '_', 's', 9, 0,
  /* 2214 */ 'i', '6', '4', '.', 'l', 't', '_', 's', 9, 0,
  /* 2224 */ 'i', '3', '2', '.', 'd', 'i', 'v', '_', 's', 9, 0,
  /* 2235 */ 'i', '6', '4', '.', 'd', 'i', 'v', '_', 's', 9, 0,
  /* 2246 */ 'f', '3', '2', '.', 's', 'e', 'l', 'e', 'c', 't', 9, 0,
  /* 2258 */ 'i', '3', '2', '.', 's', 'e', 'l', 'e', 'c', 't', 9, 0,
  /* 2270 */ 'f', '6', '4', '.', 's', 'e', 'l', 'e', 'c', 't', 9, 0,
  /* 2282 */ 'i', '6', '4', '.', 's', 'e', 'l', 'e', 'c', 't', 9, 0,
  /* 2294 */ 'e', 'x', 'c', 'e', 'p', 't', '_', 'r', 'e', 'f', '.', 's', 'e', 'l', 'e', 'c', 't', 9, 0,
  /* 2313 */ 'f', '3', '2', '.', 'c', 'a', 'l', 'l', '_', 'i', 'n', 'd', 'i', 'r', 'e', 'c', 't', 9, 0,
  /* 2332 */ 'i', '3', '2', '.', 'c', 'a', 'l', 'l', '_', 'i', 'n', 'd', 'i', 'r', 'e', 'c', 't', 9, 0,
  /* 2351 */ 'f', '6', '4', '.', 'c', 'a', 'l', 'l', '_', 'i', 'n', 'd', 'i', 'r', 'e', 'c', 't', 9, 0,
  /* 2370 */ 'i', '6', '4', '.', 'c', 'a', 'l', 'l', '_', 'i', 'n', 'd', 'i', 'r', 'e', 'c', 't', 9, 0,
  /* 2389 */ 'f', '3', '2', 'x', '4', '.', 'c', 'a', 'l', 'l', '_', 'i', 'n', 'd', 'i', 'r', 'e', 'c', 't', 9, 0,
  /* 2410 */ 'i', '3', '2', 'x', '4', '.', 'c', 'a', 'l', 'l', '_', 'i', 'n', 'd', 'i', 'r', 'e', 'c', 't', 9, 0,
  /* 2431 */ 'i', '8', 'x', '1', '6', '.', 'c', 'a', 'l', 'l', '_', 'i', 'n', 'd', 'i', 'r', 'e', 'c', 't', 9, 0,
  /* 2452 */ 'i', '1', '6', 'x', '8', '.', 'c', 'a', 'l', 'l', '_', 'i', 'n', 'd', 'i', 'r', 'e', 'c', 't', 9, 0,
  /* 2473 */ 'e', 'x', 'c', 'e', 'p', 't', '_', 'r', 'e', 'f', '.', 'c', 'a', 'l', 'l', '_', 'i', 'n', 'd', 'i', 'r', 'e', 'c', 't', 9, 0,
  /* 2499 */ 'i', '3', '2', '.', 'p', 'o', 'p', 'c', 'n', 't', 9, 0,
  /* 2511 */ 'i', '6', '4', '.', 'p', 'o', 'p', 'c', 'n', 't', 9, 0,
  /* 2523 */ 'f', '3', '2', '.', 's', 'q', 'r', 't', 9, 0,
  /* 2533 */ 'f', '6', '4', '.', 's', 'q', 'r', 't', 9, 0,
  /* 2543 */ 'f', '3', '2', '.', 'n', 'e', 'a', 'r', 'e', 's', 't', 9, 0,
  /* 2556 */ 'f', '6', '4', '.', 'n', 'e', 'a', 'r', 'e', 's', 't', 9, 0,
  /* 2569 */ 'f', '3', '2', '.', 'c', 'o', 'n', 's', 't', 9, 0,
  /* 2580 */ 'i', '3', '2', '.', 'c', 'o', 'n', 's', 't', 9, 0,
  /* 2591 */ 'f', '6', '4', '.', 'c', 'o', 'n', 's', 't', 9, 0,
  /* 2602 */ 'i', '6', '4', '.', 'c', 'o', 'n', 's', 't', 9, 0,
  /* 2613 */ 'i', '6', '4', '.', 'l', 'o', 'a', 'd', '3', '2', '_', 'u', 9, 0,
  /* 2627 */ 'i', '6', '4', '.', 'a', 't', 'o', 'm', 'i', 'c', '.', 'l', 'o', 'a', 'd', '3', '2', '_', 'u', 9, 0,
  /* 2648 */ 'i', '3', '2', '.', 'l', 'o', 'a', 'd', '1', '6', '_', 'u', 9, 0,
  /* 2662 */ 'i', '6', '4', '.', 'l', 'o', 'a', 'd', '1', '6', '_', 'u', 9, 0,
  /* 2676 */ 'i', '3', '2', '.', 'a', 't', 'o', 'm', 'i', 'c', '.', 'l', 'o', 'a', 'd', '1', '6', '_', 'u', 9, 0,
  /* 2697 */ 'i', '6', '4', '.', 'a', 't', 'o', 'm', 'i', 'c', '.', 'l', 'o', 'a', 'd', '1', '6', '_', 'u', 9, 0,
  /* 2718 */ 'i', '3', '2', '.', 'l', 'o', 'a', 'd', '8', '_', 'u', 9, 0,
  /* 2731 */ 'i', '6', '4', '.', 'l', 'o', 'a', 'd', '8', '_', 'u', 9, 0,
  /* 2744 */ 'i', '3', '2', '.', 'a', 't', 'o', 'm', 'i', 'c', '.', 'l', 'o', 'a', 'd', '8', '_', 'u', 9, 0,
  /* 2764 */ 'i', '6', '4', '.', 'a', 't', 'o', 'm', 'i', 'c', '.', 'l', 'o', 'a', 'd', '8', '_', 'u', 9, 0,
  /* 2784 */ 'i', '3', '2', '.', 'g', 'e', '_', 'u', 9, 0,
  /* 2794 */ 'i', '6', '4', '.', 'g', 'e', '_', 'u', 9, 0,
  /* 2804 */ 'i', '3', '2', '.', 'l', 'e', '_', 'u', 9, 0,
  /* 2814 */ 'i', '6', '4', '.', 'l', 'e', '_', 'u', 9, 0,
  /* 2824 */ 'i', '3', '2', '.', 'r', 'e', 'm', '_', 'u', 9, 0,
  /* 2835 */ 'i', '6', '4', '.', 'r', 'e', 'm', '_', 'u', 9, 0,
  /* 2846 */ 'i', '3', '2', '.', 's', 'h', 'r', '_', 'u', 9, 0,
  /* 2857 */ 'i', '6', '4', '.', 's', 'h', 'r', '_', 'u', 9, 0,
  /* 2868 */ 'i', '3', '2', '.', 'g', 't', '_', 'u', 9, 0,
  /* 2878 */ 'i', '6', '4', '.', 'g', 't', '_', 'u', 9, 0,
  /* 2888 */ 'i', '3', '2', '.', 'l', 't', '_', 'u', 9, 0,
  /* 2898 */ 'i', '6', '4', '.', 'l', 't', '_', 'u', 9, 0,
  /* 2908 */ 'i', '3', '2', '.', 'd', 'i', 'v', '_', 'u', 9, 0,
  /* 2919 */ 'i', '6', '4', '.', 'd', 'i', 'v', '_', 'u', 9, 0,
  /* 2930 */ 'm', 'e', 'm', '.', 'g', 'r', 'o', 'w', 9, 0,
  /* 2940 */ 'm', 'e', 'm', 'o', 'r', 'y', '.', 'g', 'r', 'o', 'w', 9, 0,
  /* 2953 */ 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 'm', 'e', 'm', 'o', 'r', 'y', 9, 0,
  /* 2969 */ 'g', 'r', 'o', 'w', '_', 'm', 'e', 'm', 'o', 'r', 'y', 9, 0,
  /* 2982 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 3013 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'y', 'p', 'e', 'd', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 3037 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 3062 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 3085 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 3108 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 3130 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3143 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3150 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3160 */ 'D', 'B', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 3170 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3185 */ 'u', 'n', 'r', 'e', 'a', 'c', 'h', 'a', 'b', 'l', 'e', 0,
  /* 3197 */ 'e', 'n', 'd', '_', 'b', 'l', 'o', 'c', 'k', 0,
  /* 3207 */ 'c', 'a', 't', 'c', 'h', '_', 'a', 'l', 'l', 0,
  /* 3217 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 3231 */ 'e', 'n', 'd', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', 0,
  /* 3244 */ 'r', 'e', 't', 'u', 'r', 'n', 0,
  /* 3251 */ 'n', 'o', 'p', 0,
  /* 3255 */ 'e', 'n', 'd', '_', 'l', 'o', 'o', 'p', 0,
  /* 3264 */ 'e', 'n', 'd', '_', 't', 'r', 'y', 0,
  };

  static const uint16_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3151U,	// DBG_VALUE
    3161U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3144U,	// BUNDLE
    3171U,	// LIFETIME_START
    3131U,	// LIFETIME_END
    0U,	// STACKMAP
    3218U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    3063U,	// PATCHABLE_FUNCTION_ENTER
    2983U,	// PATCHABLE_RET
    3109U,	// PATCHABLE_FUNCTION_EXIT
    3086U,	// PATCHABLE_TAIL_CALL
    3038U,	// PATCHABLE_EVENT_CALL
    3014U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    4760U,	// ABS_F32
    4770U,	// ABS_F64
    4473U,	// ADD_F32
    4513U,	// ADD_F32x4
    4493U,	// ADD_F64
    4549U,	// ADD_I16x8
    4483U,	// ADD_I32
    4525U,	// ADD_I32x4
    4503U,	// ADD_I64
    4537U,	// ADD_I8x16
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    4561U,	// AND_I32
    4571U,	// AND_I64
    0U,	// ARGUMENT_EXCEPT_REF
    0U,	// ARGUMENT_F32
    0U,	// ARGUMENT_F64
    0U,	// ARGUMENT_I32
    0U,	// ARGUMENT_I64
    0U,	// ARGUMENT_v16i8
    0U,	// ARGUMENT_v4f32
    0U,	// ARGUMENT_v4i32
    0U,	// ARGUMENT_v8i16
    6773U,	// ATOMIC_LOAD16_U_I32
    6794U,	// ATOMIC_LOAD16_U_I64
    6724U,	// ATOMIC_LOAD32_U_I64
    6841U,	// ATOMIC_LOAD8_U_I32
    6861U,	// ATOMIC_LOAD8_U_I64
    5660U,	// ATOMIC_LOAD_I32
    5677U,	// ATOMIC_LOAD_I64
    8271U,	// BLOCK
    20481U,	// BR
    4137U,	// BR_IF
    20965U,	// BR_TABLE_I32
    20965U,	// BR_TABLE_I64
    0U,	// BR_UNLESS
    5938U,	// CALL_EXCEPT_REF
    5850U,	// CALL_F32
    5870U,	// CALL_F64
    5860U,	// CALL_I32
    5880U,	// CALL_I64
    22954U,	// CALL_INDIRECT_EXCEPT_REF
    22794U,	// CALL_INDIRECT_F32
    22832U,	// CALL_INDIRECT_F64
    22813U,	// CALL_INDIRECT_I32
    22851U,	// CALL_INDIRECT_I64
    2318U,	// CALL_INDIRECT_VOID
    22912U,	// CALL_INDIRECT_v16i8
    22870U,	// CALL_INDIRECT_v4f32
    22891U,	// CALL_INDIRECT_v4i32
    22933U,	// CALL_INDIRECT_v8i16
    20501U,	// CALL_VOID
    5914U,	// CALL_v16i8
    5890U,	// CALL_v4f32
    5902U,	// CALL_v4i32
    5926U,	// CALL_v8i16
    0U,	// CATCHRET
    3208U,	// CATCH_ALL
    4147U,	// CATCH_I32
    4161U,	// CATCH_I64
    5830U,	// CEIL_F32
    5840U,	// CEIL_F64
    0U,	// CLEANUPRET
    4830U,	// CLZ_I32
    4840U,	// CLZ_I64
    6666U,	// CONST_F32
    6688U,	// CONST_F64
    6677U,	// CONST_I32
    6699U,	// CONST_I64
    5975U,	// COPYSIGN_F32
    5989U,	// COPYSIGN_F64
    5818U,	// COPY_EXCEPT_REF
    5818U,	// COPY_F32
    5818U,	// COPY_F64
    5818U,	// COPY_I32
    5818U,	// COPY_I64
    5818U,	// COPY_V128
    4870U,	// CTZ_I32
    4880U,	// CTZ_I64
    23434U,	// CURRENT_MEMORY_I32
    4780U,	// DIV_F32
    4790U,	// DIV_F64
    6321U,	// DIV_S_I32
    6332U,	// DIV_S_I64
    7005U,	// DIV_U_I32
    7016U,	// DIV_U_I64
    22387U,	// DROP_EXCEPT_REF
    22387U,	// DROP_F32
    22387U,	// DROP_F64
    22387U,	// DROP_I32
    22387U,	// DROP_I64
    22387U,	// DROP_V128
    3198U,	// END_BLOCK
    3232U,	// END_FUNCTION
    3256U,	// END_LOOP
    3265U,	// END_TRY
    4850U,	// EQZ_I32
    4860U,	// EQZ_I64
    4285U,	// EQ_F32
    4305U,	// EQ_F64
    4295U,	// EQ_I32
    4315U,	// EQ_I64
    5111U,	// F32_CONVERT_S_I32
    5429U,	// F32_CONVERT_S_I64
    5188U,	// F32_CONVERT_U_I32
    5488U,	// F32_CONVERT_U_I64
    5226U,	// F32_DEMOTE_F64
    5149U,	// F32_REINTERPRET_I32
    5130U,	// F64_CONVERT_S_I32
    5448U,	// F64_CONVERT_S_I64
    5207U,	// F64_CONVERT_U_I32
    5507U,	// F64_CONVERT_U_I64
    4903U,	// F64_PROMOTE_F32
    5467U,	// F64_REINTERPRET_I64
    0U,	// FALLTHROUGH_RETURN_EXCEPT_REF
    0U,	// FALLTHROUGH_RETURN_F32
    0U,	// FALLTHROUGH_RETURN_F64
    0U,	// FALLTHROUGH_RETURN_I32
    0U,	// FALLTHROUGH_RETURN_I64
    0U,	// FALLTHROUGH_RETURN_VOID
    0U,	// FALLTHROUGH_RETURN_v16i8
    0U,	// FALLTHROUGH_RETURN_v4f32
    0U,	// FALLTHROUGH_RETURN_v4i32
    0U,	// FALLTHROUGH_RETURN_v8i16
    6009U,	// FLOOR_F32
    6020U,	// FLOOR_F64
    0U,	// FP_TO_SINT_I32_F32
    0U,	// FP_TO_SINT_I32_F64
    0U,	// FP_TO_SINT_I64_F32
    0U,	// FP_TO_SINT_I64_F64
    0U,	// FP_TO_UINT_I32_F32
    0U,	// FP_TO_UINT_I32_F64
    0U,	// FP_TO_UINT_I64_F32
    0U,	// FP_TO_UINT_I64_F64
    5761U,	// GET_GLOBAL_EXCEPT_REF
    5761U,	// GET_GLOBAL_F32
    5761U,	// GET_GLOBAL_F64
    5761U,	// GET_GLOBAL_I32
    5761U,	// GET_GLOBAL_I64
    5761U,	// GET_GLOBAL_V128
    5796U,	// GET_LOCAL_EXCEPT_REF
    5796U,	// GET_LOCAL_F32
    5796U,	// GET_LOCAL_F64
    5796U,	// GET_LOCAL_I32
    5796U,	// GET_LOCAL_I64
    5796U,	// GET_LOCAL_V128
    4195U,	// GE_F32
    4205U,	// GE_F64
    6197U,	// GE_S_I32
    6207U,	// GE_S_I64
    6881U,	// GE_U_I32
    6891U,	// GE_U_I64
    7066U,	// GROW_MEMORY_I32
    4345U,	// GT_F32
    4355U,	// GT_F64
    6281U,	// GT_S_I32
    6291U,	// GT_S_I64
    6965U,	// GT_U_I32
    6975U,	// GT_U_I64
    6109U,	// I32_EXTEND16_S_I32
    6167U,	// I32_EXTEND8_S_I32
    5038U,	// I32_REINTERPRET_F32
    4920U,	// I32_TRUNC_S_F32
    5242U,	// I32_TRUNC_S_F64
    4954U,	// I32_TRUNC_S_SAT_F32
    5276U,	// I32_TRUNC_S_SAT_F64
    5059U,	// I32_TRUNC_U_F32
    5381U,	// I32_TRUNC_U_F64
    4996U,	// I32_TRUNC_U_SAT_F32
    5318U,	// I32_TRUNC_U_SAT_F64
    5415U,	// I32_WRAP_I64
    6125U,	// I64_EXTEND16_S_I64
    6065U,	// I64_EXTEND32_S_I64
    6182U,	// I64_EXTEND8_S_I64
    5093U,	// I64_EXTEND_S_I32
    5170U,	// I64_EXTEND_U_I32
    5360U,	// I64_REINTERPRET_F64
    4937U,	// I64_TRUNC_S_F32
    5259U,	// I64_TRUNC_S_F64
    4975U,	// I64_TRUNC_S_SAT_F32
    5297U,	// I64_TRUNC_S_SAT_F64
    5076U,	// I64_TRUNC_U_F32
    5398U,	// I64_TRUNC_U_F64
    5017U,	// I64_TRUNC_U_SAT_F32
    5339U,	// I64_TRUNC_U_SAT_F64
    4215U,	// LE_F32
    4225U,	// LE_F64
    6217U,	// LE_S_I32
    6227U,	// LE_S_I64
    6901U,	// LE_U_I32
    6911U,	// LE_U_I64
    6081U,	// LOAD16_S_I32
    6095U,	// LOAD16_S_I64
    6745U,	// LOAD16_U_I32
    6759U,	// LOAD16_U_I64
    6051U,	// LOAD32_S_I64
    6710U,	// LOAD32_U_I64
    6141U,	// LOAD8_S_I32
    6154U,	// LOAD8_S_I64
    6815U,	// LOAD8_U_I32
    6828U,	// LOAD8_U_I64
    5620U,	// LOAD_F32
    5640U,	// LOAD_F64
    5630U,	// LOAD_I32
    5650U,	// LOAD_I64
    8223U,	// LOOP
    4365U,	// LT_F32
    4375U,	// LT_F64
    6301U,	// LT_S_I32
    6311U,	// LT_S_I64
    6985U,	// LT_U_I32
    6995U,	// LT_U_I64
    4810U,	// MAX_F32
    4820U,	// MAX_F64
    7037U,	// MEMORY_GROW_I32
    5748U,	// MEMORY_SIZE_I32
    7027U,	// MEM_GROW_I32
    5738U,	// MEM_SIZE_I32
    4720U,	// MIN_F32
    4730U,	// MIN_F64
    4632U,	// MUL_F32
    4672U,	// MUL_F32x4
    4652U,	// MUL_F64
    4708U,	// MUL_I16x8
    4642U,	// MUL_I32
    4684U,	// MUL_I32x4
    4662U,	// MUL_I64
    4696U,	// MUL_I8x16
    6640U,	// NEAREST_F32
    6653U,	// NEAREST_F64
    4592U,	// NEG_F32
    4602U,	// NEG_F64
    4235U,	// NE_F32
    4255U,	// NE_F64
    4245U,	// NE_I32
    4265U,	// NE_I64
    3252U,	// NOP
    4325U,	// OR_I32
    4335U,	// OR_I64
    30152U,	// PCALL_INDIRECT_EXCEPT_REF
    30152U,	// PCALL_INDIRECT_F32
    30152U,	// PCALL_INDIRECT_F64
    30152U,	// PCALL_INDIRECT_I32
    30152U,	// PCALL_INDIRECT_I64
    21960U,	// PCALL_INDIRECT_VOID
    30152U,	// PCALL_INDIRECT_v16i8
    30152U,	// PCALL_INDIRECT_v4f32
    30152U,	// PCALL_INDIRECT_v4i32
    30152U,	// PCALL_INDIRECT_v8i16
    6596U,	// POPCNT_I32
    6608U,	// POPCNT_I64
    6237U,	// REM_S_I32
    6248U,	// REM_S_I64
    6921U,	// REM_U_I32
    6932U,	// REM_U_I64
    21184U,	// RETHROW
    20659U,	// RETURN_EXCEPT_REF
    20659U,	// RETURN_F32
    20659U,	// RETURN_F64
    20659U,	// RETURN_I32
    20659U,	// RETURN_I64
    3245U,	// RETURN_VOID
    20659U,	// RETURN_v16i8
    20659U,	// RETURN_v4f32
    20659U,	// RETURN_v4i32
    20659U,	// RETURN_v8i16
    5955U,	// ROTL_I32
    5965U,	// ROTL_I64
    6031U,	// ROTR_I32
    6041U,	// ROTR_I64
    6391U,	// SELECT_EXCEPT_REF
    6343U,	// SELECT_F32
    6367U,	// SELECT_F64
    6355U,	// SELECT_I32
    6379U,	// SELECT_I64
    5773U,	// SET_GLOBAL_EXCEPT_REF
    5773U,	// SET_GLOBAL_F32
    5773U,	// SET_GLOBAL_F64
    5773U,	// SET_GLOBAL_I32
    5773U,	// SET_GLOBAL_I64
    5773U,	// SET_GLOBAL_V128
    5807U,	// SET_LOCAL_EXCEPT_REF
    5807U,	// SET_LOCAL_F32
    5807U,	// SET_LOCAL_F64
    5807U,	// SET_LOCAL_I32
    5807U,	// SET_LOCAL_I64
    5807U,	// SET_LOCAL_V128
    4612U,	// SHL_I32
    4622U,	// SHL_I64
    6259U,	// SHR_S_I32
    6270U,	// SHR_S_I64
    6943U,	// SHR_U_I32
    6954U,	// SHR_U_I64
    6620U,	// SQRT_F32
    6630U,	// SQRT_F64
    46486U,	// STORE16_I32
    46499U,	// STORE16_I64
    45850U,	// STORE32_I64
    46512U,	// STORE8_I32
    46524U,	// STORE8_I64
    46654U,	// STORE_F32
    46676U,	// STORE_F64
    46665U,	// STORE_I32
    46687U,	// STORE_I64
    4385U,	// SUB_F32
    4425U,	// SUB_F32x4
    4405U,	// SUB_F64
    4461U,	// SUB_I16x8
    4395U,	// SUB_I32
    4437U,	// SUB_I32x4
    4415U,	// SUB_I64
    4449U,	// SUB_I8x16
    5785U,	// TEE_EXCEPT_REF
    5785U,	// TEE_F32
    5785U,	// TEE_F64
    5785U,	// TEE_I32
    5785U,	// TEE_I64
    5785U,	// TEE_LOCAL_EXCEPT_REF
    5785U,	// TEE_LOCAL_F32
    5785U,	// TEE_LOCAL_F64
    5785U,	// TEE_LOCAL_I32
    5785U,	// TEE_LOCAL_I64
    5785U,	// TEE_LOCAL_V128
    5785U,	// TEE_V128
    4185U,	// THROW_I32
    4185U,	// THROW_I64
    5598U,	// TRUNC_F32
    5609U,	// TRUNC_F64
    8203U,	// TRY
    3186U,	// UNREACHABLE
    4740U,	// XOR_I32
    4750U,	// XOR_I64
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// ABS_F32
    0U,	// ABS_F64
    2U,	// ADD_F32
    2U,	// ADD_F32x4
    2U,	// ADD_F64
    2U,	// ADD_I16x8
    2U,	// ADD_I32
    2U,	// ADD_I32x4
    2U,	// ADD_I64
    2U,	// ADD_I8x16
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    2U,	// AND_I32
    2U,	// AND_I64
    0U,	// ARGUMENT_EXCEPT_REF
    0U,	// ARGUMENT_F32
    0U,	// ARGUMENT_F64
    0U,	// ARGUMENT_I32
    0U,	// ARGUMENT_I64
    0U,	// ARGUMENT_v16i8
    0U,	// ARGUMENT_v4f32
    0U,	// ARGUMENT_v4i32
    0U,	// ARGUMENT_v8i16
    5U,	// ATOMIC_LOAD16_U_I32
    5U,	// ATOMIC_LOAD16_U_I64
    5U,	// ATOMIC_LOAD32_U_I64
    5U,	// ATOMIC_LOAD8_U_I32
    5U,	// ATOMIC_LOAD8_U_I64
    5U,	// ATOMIC_LOAD_I32
    5U,	// ATOMIC_LOAD_I64
    0U,	// BLOCK
    0U,	// BR
    0U,	// BR_IF
    0U,	// BR_TABLE_I32
    0U,	// BR_TABLE_I64
    0U,	// BR_UNLESS
    0U,	// CALL_EXCEPT_REF
    0U,	// CALL_F32
    0U,	// CALL_F64
    0U,	// CALL_I32
    0U,	// CALL_I64
    0U,	// CALL_INDIRECT_EXCEPT_REF
    0U,	// CALL_INDIRECT_F32
    0U,	// CALL_INDIRECT_F64
    0U,	// CALL_INDIRECT_I32
    0U,	// CALL_INDIRECT_I64
    0U,	// CALL_INDIRECT_VOID
    0U,	// CALL_INDIRECT_v16i8
    0U,	// CALL_INDIRECT_v4f32
    0U,	// CALL_INDIRECT_v4i32
    0U,	// CALL_INDIRECT_v8i16
    0U,	// CALL_VOID
    0U,	// CALL_v16i8
    0U,	// CALL_v4f32
    0U,	// CALL_v4i32
    0U,	// CALL_v8i16
    0U,	// CATCHRET
    0U,	// CATCH_ALL
    0U,	// CATCH_I32
    0U,	// CATCH_I64
    0U,	// CEIL_F32
    0U,	// CEIL_F64
    0U,	// CLEANUPRET
    0U,	// CLZ_I32
    0U,	// CLZ_I64
    0U,	// CONST_F32
    0U,	// CONST_F64
    0U,	// CONST_I32
    0U,	// CONST_I64
    2U,	// COPYSIGN_F32
    2U,	// COPYSIGN_F64
    0U,	// COPY_EXCEPT_REF
    0U,	// COPY_F32
    0U,	// COPY_F64
    0U,	// COPY_I32
    0U,	// COPY_I64
    0U,	// COPY_V128
    0U,	// CTZ_I32
    0U,	// CTZ_I64
    0U,	// CURRENT_MEMORY_I32
    2U,	// DIV_F32
    2U,	// DIV_F64
    2U,	// DIV_S_I32
    2U,	// DIV_S_I64
    2U,	// DIV_U_I32
    2U,	// DIV_U_I64
    0U,	// DROP_EXCEPT_REF
    0U,	// DROP_F32
    0U,	// DROP_F64
    0U,	// DROP_I32
    0U,	// DROP_I64
    0U,	// DROP_V128
    0U,	// END_BLOCK
    0U,	// END_FUNCTION
    0U,	// END_LOOP
    0U,	// END_TRY
    0U,	// EQZ_I32
    0U,	// EQZ_I64
    2U,	// EQ_F32
    2U,	// EQ_F64
    2U,	// EQ_I32
    2U,	// EQ_I64
    0U,	// F32_CONVERT_S_I32
    0U,	// F32_CONVERT_S_I64
    0U,	// F32_CONVERT_U_I32
    0U,	// F32_CONVERT_U_I64
    0U,	// F32_DEMOTE_F64
    0U,	// F32_REINTERPRET_I32
    0U,	// F64_CONVERT_S_I32
    0U,	// F64_CONVERT_S_I64
    0U,	// F64_CONVERT_U_I32
    0U,	// F64_CONVERT_U_I64
    0U,	// F64_PROMOTE_F32
    0U,	// F64_REINTERPRET_I64
    0U,	// FALLTHROUGH_RETURN_EXCEPT_REF
    0U,	// FALLTHROUGH_RETURN_F32
    0U,	// FALLTHROUGH_RETURN_F64
    0U,	// FALLTHROUGH_RETURN_I32
    0U,	// FALLTHROUGH_RETURN_I64
    0U,	// FALLTHROUGH_RETURN_VOID
    0U,	// FALLTHROUGH_RETURN_v16i8
    0U,	// FALLTHROUGH_RETURN_v4f32
    0U,	// FALLTHROUGH_RETURN_v4i32
    0U,	// FALLTHROUGH_RETURN_v8i16
    0U,	// FLOOR_F32
    0U,	// FLOOR_F64
    0U,	// FP_TO_SINT_I32_F32
    0U,	// FP_TO_SINT_I32_F64
    0U,	// FP_TO_SINT_I64_F32
    0U,	// FP_TO_SINT_I64_F64
    0U,	// FP_TO_UINT_I32_F32
    0U,	// FP_TO_UINT_I32_F64
    0U,	// FP_TO_UINT_I64_F32
    0U,	// FP_TO_UINT_I64_F64
    0U,	// GET_GLOBAL_EXCEPT_REF
    0U,	// GET_GLOBAL_F32
    0U,	// GET_GLOBAL_F64
    0U,	// GET_GLOBAL_I32
    0U,	// GET_GLOBAL_I64
    0U,	// GET_GLOBAL_V128
    0U,	// GET_LOCAL_EXCEPT_REF
    0U,	// GET_LOCAL_F32
    0U,	// GET_LOCAL_F64
    0U,	// GET_LOCAL_I32
    0U,	// GET_LOCAL_I64
    0U,	// GET_LOCAL_V128
    2U,	// GE_F32
    2U,	// GE_F64
    2U,	// GE_S_I32
    2U,	// GE_S_I64
    2U,	// GE_U_I32
    2U,	// GE_U_I64
    1U,	// GROW_MEMORY_I32
    2U,	// GT_F32
    2U,	// GT_F64
    2U,	// GT_S_I32
    2U,	// GT_S_I64
    2U,	// GT_U_I32
    2U,	// GT_U_I64
    0U,	// I32_EXTEND16_S_I32
    0U,	// I32_EXTEND8_S_I32
    0U,	// I32_REINTERPRET_F32
    0U,	// I32_TRUNC_S_F32
    0U,	// I32_TRUNC_S_F64
    0U,	// I32_TRUNC_S_SAT_F32
    0U,	// I32_TRUNC_S_SAT_F64
    0U,	// I32_TRUNC_U_F32
    0U,	// I32_TRUNC_U_F64
    0U,	// I32_TRUNC_U_SAT_F32
    0U,	// I32_TRUNC_U_SAT_F64
    0U,	// I32_WRAP_I64
    0U,	// I64_EXTEND16_S_I64
    0U,	// I64_EXTEND32_S_I64
    0U,	// I64_EXTEND8_S_I64
    0U,	// I64_EXTEND_S_I32
    0U,	// I64_EXTEND_U_I32
    0U,	// I64_REINTERPRET_F64
    0U,	// I64_TRUNC_S_F32
    0U,	// I64_TRUNC_S_F64
    0U,	// I64_TRUNC_S_SAT_F32
    0U,	// I64_TRUNC_S_SAT_F64
    0U,	// I64_TRUNC_U_F32
    0U,	// I64_TRUNC_U_F64
    0U,	// I64_TRUNC_U_SAT_F32
    0U,	// I64_TRUNC_U_SAT_F64
    2U,	// LE_F32
    2U,	// LE_F64
    2U,	// LE_S_I32
    2U,	// LE_S_I64
    2U,	// LE_U_I32
    2U,	// LE_U_I64
    5U,	// LOAD16_S_I32
    5U,	// LOAD16_S_I64
    5U,	// LOAD16_U_I32
    5U,	// LOAD16_U_I64
    5U,	// LOAD32_S_I64
    5U,	// LOAD32_U_I64
    5U,	// LOAD8_S_I32
    5U,	// LOAD8_S_I64
    5U,	// LOAD8_U_I32
    5U,	// LOAD8_U_I64
    5U,	// LOAD_F32
    5U,	// LOAD_F64
    5U,	// LOAD_I32
    5U,	// LOAD_I64
    0U,	// LOOP
    2U,	// LT_F32
    2U,	// LT_F64
    2U,	// LT_S_I32
    2U,	// LT_S_I64
    2U,	// LT_U_I32
    2U,	// LT_U_I64
    2U,	// MAX_F32
    2U,	// MAX_F64
    2U,	// MEMORY_GROW_I32
    0U,	// MEMORY_SIZE_I32
    2U,	// MEM_GROW_I32
    0U,	// MEM_SIZE_I32
    2U,	// MIN_F32
    2U,	// MIN_F64
    2U,	// MUL_F32
    2U,	// MUL_F32x4
    2U,	// MUL_F64
    2U,	// MUL_I16x8
    2U,	// MUL_I32
    2U,	// MUL_I32x4
    2U,	// MUL_I64
    2U,	// MUL_I8x16
    0U,	// NEAREST_F32
    0U,	// NEAREST_F64
    0U,	// NEG_F32
    0U,	// NEG_F64
    2U,	// NE_F32
    2U,	// NE_F64
    2U,	// NE_I32
    2U,	// NE_I64
    0U,	// NOP
    2U,	// OR_I32
    2U,	// OR_I64
    0U,	// PCALL_INDIRECT_EXCEPT_REF
    0U,	// PCALL_INDIRECT_F32
    0U,	// PCALL_INDIRECT_F64
    0U,	// PCALL_INDIRECT_I32
    0U,	// PCALL_INDIRECT_I64
    0U,	// PCALL_INDIRECT_VOID
    0U,	// PCALL_INDIRECT_v16i8
    0U,	// PCALL_INDIRECT_v4f32
    0U,	// PCALL_INDIRECT_v4i32
    0U,	// PCALL_INDIRECT_v8i16
    0U,	// POPCNT_I32
    0U,	// POPCNT_I64
    2U,	// REM_S_I32
    2U,	// REM_S_I64
    2U,	// REM_U_I32
    2U,	// REM_U_I64
    0U,	// RETHROW
    0U,	// RETURN_EXCEPT_REF
    0U,	// RETURN_F32
    0U,	// RETURN_F64
    0U,	// RETURN_I32
    0U,	// RETURN_I64
    0U,	// RETURN_VOID
    0U,	// RETURN_v16i8
    0U,	// RETURN_v4f32
    0U,	// RETURN_v4i32
    0U,	// RETURN_v8i16
    2U,	// ROTL_I32
    2U,	// ROTL_I64
    2U,	// ROTR_I32
    2U,	// ROTR_I64
    10U,	// SELECT_EXCEPT_REF
    10U,	// SELECT_F32
    10U,	// SELECT_F64
    10U,	// SELECT_I32
    10U,	// SELECT_I64
    0U,	// SET_GLOBAL_EXCEPT_REF
    0U,	// SET_GLOBAL_F32
    0U,	// SET_GLOBAL_F64
    0U,	// SET_GLOBAL_I32
    0U,	// SET_GLOBAL_I64
    0U,	// SET_GLOBAL_V128
    0U,	// SET_LOCAL_EXCEPT_REF
    0U,	// SET_LOCAL_F32
    0U,	// SET_LOCAL_F64
    0U,	// SET_LOCAL_I32
    0U,	// SET_LOCAL_I64
    0U,	// SET_LOCAL_V128
    2U,	// SHL_I32
    2U,	// SHL_I64
    2U,	// SHR_S_I32
    2U,	// SHR_S_I64
    2U,	// SHR_U_I32
    2U,	// SHR_U_I64
    0U,	// SQRT_F32
    0U,	// SQRT_F64
    0U,	// STORE16_I32
    0U,	// STORE16_I64
    0U,	// STORE32_I64
    0U,	// STORE8_I32
    0U,	// STORE8_I64
    0U,	// STORE_F32
    0U,	// STORE_F64
    0U,	// STORE_I32
    0U,	// STORE_I64
    2U,	// SUB_F32
    2U,	// SUB_F32x4
    2U,	// SUB_F64
    2U,	// SUB_I16x8
    2U,	// SUB_I32
    2U,	// SUB_I32x4
    2U,	// SUB_I64
    2U,	// SUB_I8x16
    2U,	// TEE_EXCEPT_REF
    2U,	// TEE_F32
    2U,	// TEE_F64
    2U,	// TEE_I32
    2U,	// TEE_I64
    2U,	// TEE_LOCAL_EXCEPT_REF
    2U,	// TEE_LOCAL_F32
    2U,	// TEE_LOCAL_F64
    2U,	// TEE_LOCAL_I32
    2U,	// TEE_LOCAL_I64
    2U,	// TEE_LOCAL_V128
    2U,	// TEE_V128
    0U,	// THROW_I32
    0U,	// THROW_I64
    0U,	// TRUNC_F32
    0U,	// TRUNC_F64
    0U,	// TRY
    0U,	// UNREACHABLE
    2U,	// XOR_I32
    2U,	// XOR_I64
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = 0;
  Bits |= OpInfo0[MI->getOpcode()] << 0;
  Bits |= OpInfo1[MI->getOpcode()] << 16;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 12) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CAL...
    return;
    break;
  case 1:
    // ABS_F32, ABS_F64, ADD_F32, ADD_F32x4, ADD_F64, ADD_I16x8, ADD_I32, ADD...
    printOperand(MI, 0, O);
    break;
  case 2:
    // BLOCK, LOOP, TRY
    printWebAssemblySignatureOperand(MI, 0, O);
    return;
    break;
  case 3:
    // PCALL_INDIRECT_EXCEPT_REF, PCALL_INDIRECT_F32, PCALL_INDIRECT_F64, PCA...
    printOperand(MI, 1, O);
    break;
  }


  // Fragment 1 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 14) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABS_F32, ABS_F64, ADD_F32, ADD_F32x4, ADD_F64, ADD_I16x8, ADD_I32, ADD...
    O << ", ";
    break;
  case 1:
    // BR, BR_TABLE_I32, BR_TABLE_I64, CALL_INDIRECT_EXCEPT_REF, CALL_INDIREC...
    return;
    break;
  case 2:
    // STORE16_I32, STORE16_I64, STORE32_I64, STORE8_I32, STORE8_I64, STORE_F...
    O << '(';
    printOperand(MI, 2, O);
    O << ')';
    printWebAssemblyP2AlignOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 2 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 16) & 1) {
    // ATOMIC_LOAD16_U_I32, ATOMIC_LOAD16_U_I64, ATOMIC_LOAD32_U_I64, ATOMIC_...
    printOperand(MI, 2, O);
  } else {
    // ABS_F32, ABS_F64, ADD_F32, ADD_F32x4, ADD_F64, ADD_I16x8, ADD_I32, ADD...
    printOperand(MI, 1, O);
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 17) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABS_F32, ABS_F64, BR_IF, CALL_EXCEPT_REF, CALL_F32, CALL_F64, CALL_I32...
    return;
    break;
  case 1:
    // ADD_F32, ADD_F32x4, ADD_F64, ADD_I16x8, ADD_I32, ADD_I32x4, ADD_I64, A...
    O << ", ";
    printOperand(MI, 2, O);
    break;
  case 2:
    // ATOMIC_LOAD16_U_I32, ATOMIC_LOAD16_U_I64, ATOMIC_LOAD32_U_I64, ATOMIC_...
    O << '(';
    printOperand(MI, 3, O);
    O << ')';
    printWebAssemblyP2AlignOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 4 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 19) & 1) {
    // SELECT_EXCEPT_REF, SELECT_F32, SELECT_F64, SELECT_I32, SELECT_I64
    O << ", ";
    printOperand(MI, 3, O);
    return;
  } else {
    // ADD_F32, ADD_F32x4, ADD_F64, ADD_I16x8, ADD_I32, ADD_I32x4, ADD_I64, A...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *WebAssemblyInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 13 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '%', 'f', '3', '2', '.', '0', 0,
  /* 7 */ '%', 'i', '3', '2', '.', '0', 0,
  /* 14 */ '%', 'f', '6', '4', '.', '0', 0,
  /* 21 */ '%', 'i', '6', '4', '.', '0', 0,
  /* 28 */ '%', 'e', 'x', 'c', 'e', 'p', 't', '_', 'r', 'e', 'f', '.', '0', 0,
  /* 42 */ '%', 'F', 'P', '3', '2', 0,
  /* 48 */ '%', 'S', 'P', '3', '2', 0,
  /* 54 */ '%', 'F', 'P', '6', '4', 0,
  /* 60 */ '%', 'S', 'P', '6', '4', 0,
  /* 66 */ '%', 'v', '1', '2', '8', 0,
  /* 72 */ 'S', 'T', 'A', 'C', 'K', 0,
  /* 78 */ 'A', 'R', 'G', 'U', 'M', 'E', 'N', 'T', 'S', 0,
  };

  static const uint8_t RegAsmOffset[] = {
    78, 72, 28, 42, 54, 48, 60, 0, 14, 7, 21, 66, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool WebAssemblyInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
